"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1003],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>p});var r=a(67294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=r.createContext({}),u=function(e){var n=r.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(a),f=t,p=d["".concat(l,".").concat(f)]||d[f]||g[f]||s;return a?r.createElement(p,o(o({ref:n},c),{},{components:a})):r.createElement(p,o({ref:n},c))}));function p(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=a.length,o=new Array(s);o[0]=f;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:t,o[1]=i;for(var u=2;u<s;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}f.displayName="MDXCreateElement"},9122:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=a(87462),t=(a(67294),a(3905));const s={title:"Tag 10",tags:["M122","Tag 10","Powershell","Parameter","Verz\xf6gerung"]},o="Tag 10: Parameter und Verz\xf6gerung",i={unversionedId:"M122/tag-0010",id:"M122/tag-0010",title:"Tag 10",description:"1 Aufgabe Parameter und Verz\xf6gerung",source:"@site/docs/M122/tag-0010.md",sourceDirName:"M122",slug:"/M122/tag-0010",permalink:"/docs/M122/tag-0010",draft:!1,tags:[{label:"M122",permalink:"/docs/tags/m-122"},{label:"Tag 10",permalink:"/docs/tags/tag-10"},{label:"Powershell",permalink:"/docs/tags/powershell"},{label:"Parameter",permalink:"/docs/tags/parameter"},{label:"Verz\xf6gerung",permalink:"/docs/tags/verzogerung"}],version:"current",frontMatter:{title:"Tag 10",tags:["M122","Tag 10","Powershell","Parameter","Verz\xf6gerung"]},sidebar:"tutorialSidebar",previous:{title:"Tag 9",permalink:"/docs/M122/tag-0009"},next:{title:"Tag 11",permalink:"/docs/M122/tag-0011"}},l={},u=[{value:"1 Aufgabe Parameter und Verz\xf6gerung",id:"1-aufgabe-parameter-und-verz\xf6gerung",level:2},{value:"1.1 Aufgabe 4",id:"11-aufgabe-4",level:3},{value:"1.2 Aufgabe 5",id:"12-aufgabe-5",level:3},{value:"1.3 Aufgabe 6",id:"13-aufgabe-6",level:3},{value:"2 Aufgabe Funktionen",id:"2-aufgabe-funktionen",level:2},{value:"2.1 Aufgabe 1",id:"21-aufgabe-1",level:3},{value:"2.2 Aufgabe 2",id:"22-aufgabe-2",level:3},{value:"2.3 Aufgabe 3",id:"23-aufgabe-3",level:3},{value:"2.4 Aufgabe 4",id:"24-aufgabe-4",level:3}],c={toc:u};function d(e){let{components:n,...a}=e;return(0,t.kt)("wrapper",(0,r.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"tag-10-parameter-und-verz\xf6gerung"},"Tag 10: Parameter und Verz\xf6gerung"),(0,t.kt)("h2",{id:"1-aufgabe-parameter-und-verz\xf6gerung"},"1 Aufgabe Parameter und Verz\xf6gerung"),(0,t.kt)("h3",{id:"11-aufgabe-4"},"1.1 Aufgabe 4"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell"},'# Author: Valentino Panico\n# Datum: 04.05.2022\n# Version: 1.0\n# Funktionsbeschreibung: Sortieren von Prozessen nach CPU-Zeit und mit Farbe ausgeben\n# Parameter:\n# ---\n\n# variablen auf 0 setzen f\xfcr anzahl z\xe4hlen\n$greenProcess = 0\n$whiteProcess = 0\n$redProcess = 0\n\n# prozesse holen und sortieren\n# kleiner 300 = gruener text\n# zwischen 300 und 1000 = weisser text\n# groesser 1000 = roter text\nGet-Process | Sort-Object CPU | ForEach-Object { \n    if ($_.CPU -lt 300) { \n        Write-Host -ForegroundColor green $_.Name\n        $greenProcess += 1\n    } \n    elseif ($_.CPU -ge 300 -and $_.CPU -lt 1000) { \n        Write-Host -ForegroundColor white $_.Name\n        $whiteProcess += 1\n    }\n    else {\n        Write-Host -ForegroundColor red $_.Name\n        $redProcess += 1\n    }\n}\n\n# anzahl ausgeben\nWrite-Host "`n#####`n`nAnzahl gruene Prozesse:`t$greenProcess`nAnzahl weisse Prozesse:`t$whiteProcess`nAnzahl rote Prozesse:`t$redProcess"\n')),(0,t.kt)("h3",{id:"12-aufgabe-5"},"1.2 Aufgabe 5"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell"},'# Author: Valentino Panico\n# Datum: 04.05.2022\n# Version: 1.0\n# Funktionsbeschreibung: Sortieren von Prozessen nach CPU-Zeit und mit Farbe ausgeben\n# Parameter: [1] Pfad zum Verzeichnis, [2] Zu suchender Begriff, [3] Zu ersetzender Begriff\n# ---\n\n# parameter definieren\nparam (\n    # pfad zum verzeichnis\n    [Parameter(Mandatory = $true)]\n    [string]\n    $path,\n    # zu suchender begriff\n    [Parameter(Mandatory = $true)]\n    [string]\n    $search,\n    # zu ersetzender begriff\n    [Parameter(Mandatory = $true)]\n    [string]\n    $replace\n)\n\n# directory scannen und dateinamen speichern\n$collection = Get-ChildItem $path | ForEach-Object { $_.Name }\n\n# jede datei begriff ersetzen\nforeach ($item in $collection) {\n    $file = $path + "\\" + $item\n    (Get-Content $file) -replace "$search", "$replace" | Set-Content $file\n}\n')),(0,t.kt)("h3",{id:"13-aufgabe-6"},"1.3 Aufgabe 6"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell"},'# Author: Valentino Panico\n# Datum: 04.05.2022\n# Version: 1.0\n# Funktionsbeschreibung: CSV umschreiben f\xfcr Import in istest.ch\n# Parameter: [1] Pfad zur CSV-Datei, [2] Pfad zum Export-Ordner\n# ---\n\n# parameter definieren\nparam (\n    # pfad zur csv datei\n    [Parameter(Mandatory = $true)]\n    [string]\n    $pathCSV,\n    # pfad zum export ordner\n    [Parameter(Mandatory = $true)]\n    [string]\n    $pathExport\n)\n\n# csv importieren\n$csv = Import-Csv $pathCSV -Delimiter ";"\n\n$csv | ForEach-Object {\n    # klasse von jedem datensatz holen\n    $klasse = $_.Klasse\n\n    # klassenname splitten und nur erster teil nutzen\n    $splitKlasse = $klasse -split "\\s"\n    $klasse = $splitKlasse[0]\n\n    # export pfad setzen\n    $exportPath = $pathExport + $klasse + ".csv"\n\n    # csv exportieren\n    $csv | Where-Object { $_.Klasse -eq $klasse } | Select-Object Name, Vorname, Benutzername, @{N = "Kennwort"; E = { $_.Benutzername } } | Export-Csv $exportPath -Delimiter ";" -NoTypeInformation\n}\n')),(0,t.kt)("h2",{id:"2-aufgabe-funktionen"},"2 Aufgabe Funktionen"),(0,t.kt)("h3",{id:"21-aufgabe-1"},"2.1 Aufgabe 1"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell"},"# Author: Valentino Panico\n# Datum: 02.05.2022\n# Version: 1.0\n# Funktionsbeschreibung: Celsius in Fahrenheit\n# Parameter: [1] Celsius Eingabe\n# ---\n\nfunction celsiusToFahrenheit {\n    param (\n        # celsius eingabe\n        [Parameter(Mandatory = $true)]\n        [double]\n        $celsius\n    )\n    \n    [double]$fahrenheit = ($celsius * 9) / 5 + 32\n\n    return $fahrenheit\n}\n")),(0,t.kt)("h3",{id:"22-aufgabe-2"},"2.2 Aufgabe 2"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell"},'# Author: Valentino Panico\n# Datum: 02.05.2022\n# Version: 1.0\n# Funktionsbeschreibung: Datum in einem Hashtable ausgeben\n# Parameter:\n# ---\n\nfunction dateInHashtable {\n    # datum holen\n    $date = Get-Date\n\n    # hashtable erstellen\n    $dateHashtable = @{\n        "day" = $date.day\n        "month" = $date.month\n        "year" = $date.year\n    }\n    \n    return $dateHashtable\n}\n')),(0,t.kt)("h3",{id:"23-aufgabe-3"},"2.3 Aufgabe 3"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell"},"# Author: Valentino Panico\n# Datum: 04.05.2022\n# Version: 1.0\n# Funktionsbeschreibung: Prozesse ausgeben, die sichbar sind\n# Parameter: [1] Switch, Gridview\n# ---\n\nfunction visibleProcess {\n    param (\n        # true = gridview, false = terminal\n        [Parameter(Mandatory = $false)]\n        [switch]\n        $showGrid\n    )\n\n    # nur die prozesse ausgeben, die einen mainwindowtitle haben\n    # wenn showgrid gesetzt, als gridview ausgeben\n    # wenn nicht, in konsole\n    if ($showGrid -eq $true) {\n        Get-Process | Where-Object { $_.MainWindowTitle } | Select-Object Id, ProcessName | Out-GridView\n    }\n    else {\n        Get-Process | Where-Object { $_.MainWindowTitle } | Select-Object Id, ProcessName\n    }\n    \n}\n")),(0,t.kt)("h3",{id:"24-aufgabe-4"},"2.4 Aufgabe 4"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell"},'# Author: Valentino Panico\n# Datum: 04.05.2022\n# Version: 1.0\n# Funktionsbeschreibung: Prozesse ausgeben, die sichbar sind\n# Parameter: [1] Switch, Gridview\n# ---\n\nfunction getMonthDE {\n    param (\n        # mit hashtable\n        [Parameter(Mandatory = $false)]\n        [switch]\n        $asHashtable\n    )\n\n    [string]$dayofweek = (Get-Date).DayOfWeek\n\n    if ($asHashtable -eq $true) {\n        $dayofweekHashtable = @{\n            "Monday"    = "Montag"\n            "Tuesday"   = "Dienstag"\n            "Wednesday" = "Mittwoch"\n            "Thursday"  = "Donnerstag"\n            "Friday"    = "Freitag"\n            "Saturday"  = "Samstag"\n            "Sunday"    = "Sonntag"\n        }\n\n        if ($dayofweekHashtable.ContainsKey($dayofweek)) {\n            Write-Host "Aktueller Wochentag (Hashtable):" $dayofweekHashtable.$dayofweek\n        }\n    }\n    else {\n        switch ($dayofweek) {\n            "Monday" { $dayofweekDE = "Montag" }\n            "Tuesday" { $dayofweekDE = "Dienstag" }\n            "Wednesday" { $dayofweekDE = "Mittwoch" }\n            "Thursday" { $dayofweekDE = "Donnerstag" }\n            "Friday" { $dayofweekDE = "Freitag" }\n            "Saturday" { $dayofweekDE = "Samstag" }\n            "Sunday" { $dayofweekDE = "Sonntag" }\n        }\n\n        Write-Host "Aktueller Wochentag (Switch-Case):" $dayofweekDE\n    }\n}\n')))}d.isMDXComponent=!0}}]);