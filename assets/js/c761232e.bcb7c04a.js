"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[67804],{53889:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var t=r(85893),i=r(11151);const a={title:"Tag 4",tags:["M226B","Tag 4","Java","BZTF-Beispiel","Selbsttest"]},s="Tag 4",l={id:"M226B/tag-0004",title:"Tag 4",description:"1 Beispiele",source:"@site/docs/M226B/tag-0004.md",sourceDirName:"M226B",slug:"/M226B/tag-0004",permalink:"/docs/M226B/tag-0004",draft:!1,unlisted:!1,tags:[{label:"M226B",permalink:"/docs/tags/m-226-b"},{label:"Tag 4",permalink:"/docs/tags/tag-4"},{label:"Java",permalink:"/docs/tags/java"},{label:"BZTF-Beispiel",permalink:"/docs/tags/bztf-beispiel"},{label:"Selbsttest",permalink:"/docs/tags/selbsttest"}],version:"current",frontMatter:{title:"Tag 4",tags:["M226B","Tag 4","Java","BZTF-Beispiel","Selbsttest"]},sidebar:"tutorialSidebar",previous:{title:"Tag 3",permalink:"/docs/M226B/tag-0003"},next:{title:"Tag 5",permalink:"/docs/M226B/tag-0005"}},u={},h=[{value:"1 Beispiele",id:"1-beispiele",level:2},{value:"1.1 BZT7",id:"11-bzt7",level:3},{value:"1.2 BZT8",id:"12-bzt8",level:3},{value:"1.3 BZT9",id:"13-bzt9",level:3},{value:"2 Formativer Selbsttest",id:"2-formativer-selbsttest",level:2},{value:"3 Unklarheiten",id:"3-unklarheiten",level:2}];function c(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"tag-4",children:"Tag 4"}),"\n",(0,t.jsx)(n.h2,{id:"1-beispiele",children:"1 Beispiele"}),"\n",(0,t.jsx)(n.h3,{id:"11-bzt7",children:"1.1 BZT7"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\n/**\r\n * Hello world!\r\n *\r\n */\r\npublic class App \r\n{\r\n    public static void main( String[] args )\r\n    {\r\n        Person pers1 = new Person("Muster");\r\n\r\n        Lernende lern1 = new Lernende("Moritz", 4711);\r\n\r\n        Lehrer lehr1 = new Lehrer("Lempel", 12345, "RitschRatschM\xfchle");\r\n\r\n        Angestellte ange1 = new Angestellte("Verwalti", 54321, true);\r\n\r\n        Angestellte ange2 = new Angestellte("Schl\xe4ffrig", 345, false);\r\n\r\n        System.out.println(pers1.toString());\r\n        System.out.println(lern1.toString());\r\n        System.out.println(lehr1.toString());\r\n        System.out.println(ange1.toString());\r\n        System.out.println(ange2.toString());\r\n\r\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\r\n\r\n        ange1.heiraten(ange2);\r\n        lehr1.heiraten(lehr1);\r\n        ange2.heiraten(lehr1);\r\n\r\n        ange1.scheiden();\r\n        ange2.scheiden();\r\n        lehr1.scheiden();\r\n\r\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\r\n\r\n        System.out.println(ange1.equals(ange1));\r\n        System.out.println(ange1.equals(ange2));\r\n        Angestellte ange3 = new Angestellte("Schl\xe4ffrig");\r\n        System.out.println(ange2.equals(ange3));\r\n        Angestellte ange4 = new Angestellte("Hampelmann");\r\n        System.out.println(ange1.equals(ange4));\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Person {\r\n    protected String nachname;\r\n\r\n    protected Person(String nachname) {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public void setNachname(String nachname) {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public String getNachname() {\r\n        return nachname;\r\n    }\r\n\r\n    // public String vorstellen() {\r\n    //     String output = "Ich heisse " + getNachname() + "! Von der Klasse " + this.getClass() + ".";\r\n    //     return output;\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return nachname + " (Attributquelle: Klasse Person) - " + getClass() + ".";\r\n    }\r\n\r\n    private Person ehepartner = null;   // Die Referenz auf den Ehepartner wird erstellt, aber auf null gesetzt\r\n                                    // einAngestellter.heiraten(eineAngestellte); Als Hinweis: Der Aufruf im main!\r\n    protected void heiraten(Person ehepartner) // \r\n    {\r\n        if (this != ehepartner) // \xfcberpr\xfcfung ob nicht selber\r\n        {\r\n            if(this.ehepartner == null && ehepartner.ehepartner == null) // wenn beide noch nicht verheiratet sind\r\n            {\r\n                this.ehepartner = ehepartner; //  person auf ehepartner setzen\r\n                ehepartner.ehepartner = this; // ?\r\n\r\n                System.out.println(nachname + " und " + ehepartner.getNachname() + " haben geheiratet. ");\r\n            }\r\n            else // wenn mind. jemand bereits verheiratet ist\r\n            {\r\n                System.out.println(nachname + " und " + ehepartner.getNachname() + " k\xf6nnen nicht heiraten, " + "weil mindestens einer bereits verheiratet ist! ");\r\n            }\r\n        }\r\n        else // wenn selber\r\n        {\r\n            System.out.println(nachname + " kann sich nicht selber heiraten!");\r\n        }\r\n    }\r\n\r\n    protected void scheiden() {\r\n        if (ehepartner != null) {\r\n            Person temp = ehepartner;\r\n            ehepartner.ehepartner = null;\r\n            this.ehepartner = null;\r\n\r\n            System.out.println(nachname + " und " + temp.getNachname() + " haben sich geschieden.");\r\n        } else {\r\n            System.out.println(nachname + " ist nicht verheiratet.");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj) {\r\n            return true;\r\n        } else if (obj == null) {\r\n            return false;\r\n        } else if (obj.getClass() == getClass() && this.hashCode() == ((Person)obj).hashCode()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Mitarbeiter extends Person {\r\n    protected int personalNummer;\r\n\r\n    protected Mitarbeiter(String nachname, int personalNummer) {\r\n        super(nachname);\r\n        this.personalNummer = personalNummer;\r\n    }\r\n\r\n    protected Mitarbeiter(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public void setPersonalNummer(int personalNummer) {\r\n        this.personalNummer = personalNummer;\r\n    }\r\n\r\n    public int getPersonalNummer() {\r\n        return personalNummer;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " Meine Personalnummer ist " + getPersonalNummer() + " und ich";\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Personalnummer: " + getPersonalNummer() + " (Attributquelle: Klasse Mitarbeiter).";\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Lernende extends Person {\r\n    private int nummer;\r\n\r\n    public Lernende(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public Lernende(String nachname, int nummer) {\r\n        super(nachname);\r\n        this.nummer = nummer;\r\n    }\r\n\r\n    public void setNummer(int nummer) {\r\n        this.nummer = nummer;\r\n    }\r\n\r\n    public int getNummer() {\r\n        return nummer;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " Meine Nummer ist " + getNummer();\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Nummer: " + getNummer() + " (Attributquelle: Klasse Lernende).";\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Lehrer extends Mitarbeiter {\r\n    private String fachbereich;\r\n\r\n    public Lehrer(String nachname, int personalNummer, String fachbereich) {\r\n        super(nachname, personalNummer);\r\n        this.fachbereich = fachbereich;\r\n    }\r\n\r\n    public void setFachbereich(String fachbereich) {\r\n        this.fachbereich = fachbereich;\r\n    }\r\n\r\n    public String getFachbereich() {\r\n        return fachbereich;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " lehre " + getFachbereich();\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Fachbereich: " + getFachbereich() + " (Attributquelle: Klasse Lehrer).";\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Angestellte extends Mitarbeiter {\r\n    private boolean schulleitung;\r\n\r\n    public Angestellte(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public Angestellte(String nachname, int personalNummer) {\r\n        super(nachname, personalNummer);\r\n    }\r\n\r\n    public Angestellte(String nachname, int personalNummer, boolean schulleitung) {\r\n        super(nachname, personalNummer);\r\n        this.schulleitung = schulleitung;\r\n    }\r\n\r\n    public void setSchulleitung(boolean schulleitung) {\r\n        this.schulleitung = schulleitung;\r\n    }\r\n\r\n    public boolean isSchulleitung() {\r\n        return schulleitung;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     if(isSchulleitung() == false) {\r\n    //         return super.vorstellen() + " bin einfacher Angestellter";\r\n    //     } else {\r\n    //         return super.vorstellen() + " bin Schulleitungsmitglied";\r\n    //     }\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - In Schulleitung?: " + isSchulleitung();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"getClass() -> Diese Methode gibt die Klasse zur\xfcck"}),"\n",(0,t.jsxs)(n.p,{children:["toString() -> Standardm\xe4ssig gibt diese Methode bei der Ausgabe die Klasse und einen Hashwert aus. Beispiel: ",(0,t.jsx)(n.code,{children:"bzt7.Angestellte@659e0bfd"})]}),"\n",(0,t.jsx)(n.p,{children:"hashCode() -> Gibt den Hashwert eines Objekts zur\xfcck. Es ist eine eindeutige Identifikation. In jedem Programm gibt es jeden Hashcode nur einmal."}),"\n",(0,t.jsx)(n.p,{children:"equals() -> \xdcberpr\xfcft auf Gleichheit"}),"\n",(0,t.jsxs)(n.p,{children:["UML:",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.img,{alt:"UML",src:r(88738).Z+"",width:"993",height:"775"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"/appendix/M226B/UML/tag4_01",children:"Source Code"})]}),"\n",(0,t.jsx)(n.h3,{id:"12-bzt8",children:"1.2 BZT8"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\n/**\r\n * Hello world!\r\n *\r\n */\r\npublic class App \r\n{\r\n    public static void main( String[] args )\r\n    {\r\n        Lernende lern1 = new Lernende("Moritz", 4711);\r\n\r\n        Lehrer lehr1 = new Lehrer("Lempel", 12345, "RitschRatschM\xfchle");\r\n\r\n        Angestellte ange1 = new Angestellte("Verwalti", 54321, true);\r\n\r\n        Angestellte ange2 = new Angestellte("Schl\xe4ffrig", 345, false);\r\n        \r\n        System.out.println(lern1.toString());\r\n        System.out.println(lehr1.toString());\r\n        System.out.println(ange1.toString());\r\n        System.out.println(ange2.toString());\r\n\r\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\r\n\r\n        ange1.heiraten(ange2);\r\n        lehr1.heiraten(lehr1);\r\n        ange2.heiraten(lehr1);\r\n\r\n        ange1.scheiden();\r\n        ange2.scheiden();\r\n        lehr1.scheiden();\r\n\r\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\r\n\r\n        System.out.println(ange1.equals(ange1));\r\n        System.out.println(ange1.equals(ange2));\r\n        Angestellte ange3 = new Angestellte("Schl\xe4ffrig");\r\n        System.out.println(ange2.equals(ange3));\r\n        Angestellte ange4 = new Angestellte("Hampelmann");\r\n        System.out.println(ange1.equals(ange4));\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\nabstract class Person {\r\n    protected String nachname;\r\n\r\n    protected Person(String nachname) {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public void setNachname(String nachname) {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public String getNachname() {\r\n        return nachname;\r\n    }\r\n\r\n    // public String vorstellen() {\r\n    //     String output = "Ich heisse " + getNachname() + "! Von der Klasse " + this.getClass() + ".";\r\n    //     return output;\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return nachname + " (Attributquelle: Klasse Person) - " + getClass() + ".";\r\n    }\r\n\r\n    private Person ehepartner = null;   // Die Referenz auf den Ehepartner wird erstellt, aber auf null gesetzt\r\n                                    // einAngestellter.heiraten(eineAngestellte); Als Hinweis: Der Aufruf im main!\r\n    protected void heiraten(Person ehepartner) // \r\n    {\r\n        if (this != ehepartner) // \xfcberpr\xfcfung ob nicht selber\r\n        {\r\n            if(this.ehepartner == null && ehepartner.ehepartner == null) // wenn beide noch nicht verheiratet sind\r\n            {\r\n                this.ehepartner = ehepartner; //  person auf ehepartner setzen\r\n                ehepartner.ehepartner = this; // ?\r\n\r\n                System.out.println(nachname + " und " + ehepartner.getNachname() + " haben geheiratet. ");\r\n            }\r\n            else // wenn mind. jemand bereits verheiratet ist\r\n            {\r\n                System.out.println(nachname + " und " + ehepartner.getNachname() + " k\xf6nnen nicht heiraten, " + "weil mindestens einer bereits verheiratet ist! ");\r\n            }\r\n        }\r\n        else // wenn selber\r\n        {\r\n            System.out.println(nachname + " kann sich nicht selber heiraten!");\r\n        }\r\n    }\r\n\r\n    protected void scheiden() {\r\n        if (ehepartner != null) {\r\n            Person temp = ehepartner;\r\n            ehepartner.ehepartner = null;\r\n            this.ehepartner = null;\r\n\r\n            System.out.println(nachname + " und " + temp.getNachname() + " haben sich geschieden.");\r\n        } else {\r\n            System.out.println(nachname + " ist nicht verheiratet.");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj) {\r\n            return true;\r\n        } else if (obj == null) {\r\n            return false;\r\n        } else if (obj.getClass() == getClass() && this.hashCode() == ((Person)obj).hashCode()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\nabstract class Mitarbeiter extends Person {\r\n    protected int personalNummer;\r\n\r\n    protected Mitarbeiter(String nachname, int personalNummer) {\r\n        super(nachname);\r\n        this.personalNummer = personalNummer;\r\n    }\r\n\r\n    protected Mitarbeiter(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public void setPersonalNummer(int personalNummer) {\r\n        this.personalNummer = personalNummer;\r\n    }\r\n\r\n    public int getPersonalNummer() {\r\n        return personalNummer;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " Meine Personalnummer ist " + getPersonalNummer() + " und ich";\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Personalnummer: " + getPersonalNummer() + " (Attributquelle: Klasse Mitarbeiter).";\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Lernende extends Person {\r\n    private int nummer;\r\n\r\n    public Lernende(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public Lernende(String nachname, int nummer) {\r\n        super(nachname);\r\n        this.nummer = nummer;\r\n    }\r\n\r\n    public void setNummer(int nummer) {\r\n        this.nummer = nummer;\r\n    }\r\n\r\n    public int getNummer() {\r\n        return nummer;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " Meine Nummer ist " + getNummer();\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Nummer: " + getNummer() + " (Attributquelle: Klasse Lernende).";\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Lehrer extends Mitarbeiter {\r\n    private String fachbereich;\r\n\r\n    public Lehrer(String nachname, int personalNummer, String fachbereich) {\r\n        super(nachname, personalNummer);\r\n        this.fachbereich = fachbereich;\r\n    }\r\n\r\n    public void setFachbereich(String fachbereich) {\r\n        this.fachbereich = fachbereich;\r\n    }\r\n\r\n    public String getFachbereich() {\r\n        return fachbereich;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " lehre " + getFachbereich();\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Fachbereich: " + getFachbereich() + " (Attributquelle: Klasse Lehrer).";\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Angestellte extends Mitarbeiter {\r\n    private boolean schulleitung;\r\n\r\n    public Angestellte(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public Angestellte(String nachname, int personalNummer) {\r\n        super(nachname, personalNummer);\r\n    }\r\n\r\n    public Angestellte(String nachname, int personalNummer, boolean schulleitung) {\r\n        super(nachname, personalNummer);\r\n        this.schulleitung = schulleitung;\r\n    }\r\n\r\n    public void setSchulleitung(boolean schulleitung) {\r\n        this.schulleitung = schulleitung;\r\n    }\r\n\r\n    public boolean isSchulleitung() {\r\n        return schulleitung;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     if(isSchulleitung() == false) {\r\n    //         return super.vorstellen() + " bin einfacher Angestellter";\r\n    //     } else {\r\n    //         return super.vorstellen() + " bin Schulleitungsmitglied";\r\n    //     }\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - In Schulleitung?: " + isSchulleitung();\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"BZT8"})," wurden die ",(0,t.jsx)(n.em,{children:"abstrakten Klassen"})," eingef\xfchrt. ",(0,t.jsx)(n.code,{children:"abstract"})," kann vor die Klasse geschrieben werden und erlaubt es nicht mehr eine Instanz von dieser Klasse zu erstellen. Somit k\xf6nnen nur noch die Subklassen von dieser Klasse erstellt werden."]}),"\n",(0,t.jsx)(n.h3,{id:"13-bzt9",children:"1.3 BZT9"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\n/**\r\n * Hello world!\r\n *\r\n */\r\npublic class App \r\n{\r\n    public static void main( String[] args )\r\n    {\r\n        Lernende lern1 = new Lernende("Moritz", 4711);\r\n\r\n        Lehrer lehr1 = new Lehrer("Lempel", 12345, "RitschRatschM\xfchle");\r\n\r\n        Angestellte ange1 = new Angestellte("Verwalti", 54321, true);\r\n\r\n        Angestellte ange2 = new Angestellte("Schl\xe4ffrig", 345, false);\r\n\r\n        System.out.println(lern1.toString());\r\n        System.out.println(lehr1.toString());\r\n        System.out.println(ange1.toString());\r\n        System.out.println(ange2.toString());\r\n\r\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\r\n\r\n        ange1.heiraten(ange2);\r\n        lehr1.heiraten(lehr1);\r\n        ange2.heiraten(lehr1);\r\n\r\n        ange1.scheiden();\r\n        ange2.scheiden();\r\n        lehr1.scheiden();\r\n\r\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\r\n\r\n        System.out.println(ange1.equals(ange1));\r\n        System.out.println(ange1.equals(ange2));\r\n        Angestellte ange3 = new Angestellte("Schl\xe4ffrig");\r\n        System.out.println(ange2.equals(ange3));\r\n        Angestellte ange4 = new Angestellte("Hampelmann");\r\n        System.out.println(ange1.equals(ange4));\r\n\r\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\r\n\r\n        // Anzahl wird auf 3 gesetzt, mindestkonsum ist allerdings auf 4\r\n        System.out.println("Bitte als Angestellter Fr. " + ange1.kantineKonsum(3) + " bezahlen.");\r\n\r\n        // Anzahl wird auf 5 gesetzt, mindestkonsum ist allerdings auf 8\r\n        System.out.println("Bitte als Lehrer Fr. " + lehr1.kantineKonsum(5) + " bezahlen.");\r\n\r\n        // Lernender hat kein mindestkonsum. Dazu bekommt er noch 10% Rabatt\r\n        System.out.println("Bitte als Lernender Fr. " + lern1.kantineKonsum(7) + " bezahlen.");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\nabstract class Person {\r\n    protected String nachname;\r\n    protected final double minpreis = 2.50;\r\n\r\n    protected Person(String nachname) {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public void setNachname(String nachname) {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public String getNachname() {\r\n        return nachname;\r\n    }\r\n\r\n    // public String vorstellen() {\r\n    //     String output = "Ich heisse " + getNachname() + "! Von der Klasse " + this.getClass() + ".";\r\n    //     return output;\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return nachname + " (Attributquelle: Klasse Person) - " + getClass() + ".";\r\n    }\r\n\r\n    private Person ehepartner = null;   // Die Referenz auf den Ehepartner wird erstellt, aber auf null gesetzt\r\n                                    // einAngestellter.heiraten(eineAngestellte); Als Hinweis: Der Aufruf im main!\r\n    protected void heiraten(Person ehepartner) // \r\n    {\r\n        if (this != ehepartner) // \xfcberpr\xfcfung ob nicht selber\r\n        {\r\n            if(this.ehepartner == null && ehepartner.ehepartner == null) // wenn beide noch nicht verheiratet sind\r\n            {\r\n                this.ehepartner = ehepartner; //  person auf ehepartner setzen\r\n                ehepartner.ehepartner = this; // ?\r\n\r\n                System.out.println(nachname + " und " + ehepartner.getNachname() + " haben geheiratet. ");\r\n            }\r\n            else // wenn mind. jemand bereits verheiratet ist\r\n            {\r\n                System.out.println(nachname + " und " + ehepartner.getNachname() + " k\xf6nnen nicht heiraten, " + "weil mindestens einer bereits verheiratet ist! ");\r\n            }\r\n        }\r\n        else // wenn selber\r\n        {\r\n            System.out.println(nachname + " kann sich nicht selber heiraten!");\r\n        }\r\n    }\r\n\r\n    protected void scheiden() {\r\n        if (ehepartner != null) {\r\n            Person temp = ehepartner;\r\n            ehepartner.ehepartner = null;\r\n            this.ehepartner = null;\r\n\r\n            System.out.println(nachname + " und " + temp.getNachname() + " haben sich geschieden.");\r\n        } else {\r\n            System.out.println(nachname + " ist nicht verheiratet.");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj) {\r\n            return true;\r\n        } else if (obj == null) {\r\n            return false;\r\n        } else if (obj.getClass() == getClass() && this.hashCode() == ((Person)obj).hashCode()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n\r\n    public abstract double kantineKonsum(int anzahl);\r\n\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\nabstract class Mitarbeiter extends Person {\r\n    protected int personalNummer;\r\n\r\n    protected Mitarbeiter(String nachname, int personalNummer) {\r\n        super(nachname);\r\n        this.personalNummer = personalNummer;\r\n    }\r\n\r\n    protected Mitarbeiter(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public void setPersonalNummer(int personalNummer) {\r\n        this.personalNummer = personalNummer;\r\n    }\r\n\r\n    public int getPersonalNummer() {\r\n        return personalNummer;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " Meine Personalnummer ist " + getPersonalNummer() + " und ich";\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Personalnummer: " + getPersonalNummer() + " (Attributquelle: Klasse Mitarbeiter).";\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Lernende extends Person {\r\n    private int nummer;\r\n\r\n    public Lernende(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public Lernende(String nachname, int nummer) {\r\n        super(nachname);\r\n        this.nummer = nummer;\r\n    }\r\n\r\n    public void setNummer(int nummer) {\r\n        this.nummer = nummer;\r\n    }\r\n\r\n    public int getNummer() {\r\n        return nummer;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " Meine Nummer ist " + getNummer();\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Nummer: " + getNummer() + " (Attributquelle: Klasse Lernende).";\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return super.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public double kantineKonsum(int anzahl) {\r\n        // 10% Rabatt\r\n        return anzahl * minpreis * 0.9;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Lehrer extends Mitarbeiter {\r\n    private String fachbereich;\r\n\r\n    public Lehrer(String nachname, int personalNummer, String fachbereich) {\r\n        super(nachname, personalNummer);\r\n        this.fachbereich = fachbereich;\r\n    }\r\n\r\n    public void setFachbereich(String fachbereich) {\r\n        this.fachbereich = fachbereich;\r\n    }\r\n\r\n    public String getFachbereich() {\r\n        return fachbereich;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     return super.vorstellen() + " lehre " + getFachbereich();\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - Fachbereich: " + getFachbereich() + " (Attributquelle: Klasse Lehrer).";\r\n    }\r\n\r\n    @Override\r\n    public double kantineKonsum(int anzahl) {\r\n        if (anzahl < 8) {\r\n            anzahl = 8;\r\n        }\r\n        return anzahl * minpreis;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\npublic class Angestellte extends Mitarbeiter {\r\n    private boolean schulleitung;\r\n\r\n    public Angestellte(String nachname) {\r\n        super(nachname);\r\n    }\r\n\r\n    public Angestellte(String nachname, int personalNummer) {\r\n        super(nachname, personalNummer);\r\n    }\r\n\r\n    public Angestellte(String nachname, int personalNummer, boolean schulleitung) {\r\n        super(nachname, personalNummer);\r\n        this.schulleitung = schulleitung;\r\n    }\r\n\r\n    public void setSchulleitung(boolean schulleitung) {\r\n        this.schulleitung = schulleitung;\r\n    }\r\n\r\n    public boolean isSchulleitung() {\r\n        return schulleitung;\r\n    }\r\n\r\n    // @Override\r\n    // public String vorstellen() {\r\n    //     if(isSchulleitung() == false) {\r\n    //         return super.vorstellen() + " bin einfacher Angestellter";\r\n    //     } else {\r\n    //         return super.vorstellen() + " bin Schulleitungsmitglied";\r\n    //     }\r\n    // }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString() + " - In Schulleitung?: " + isSchulleitung();\r\n    }\r\n\r\n    @Override\r\n    public double kantineKonsum(int anzahl) {\r\n        if (anzahl < 4) {\r\n            anzahl = 4;\r\n        }\r\n        return anzahl * minpreis;\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"abstract"})," kann auch bei Methoden genutzt werden. Es dient als Ger\xfcst von Methoden. Diese Methoden ",(0,t.jsx)(n.strong,{children:"M\xdcSSEN"})," in den Subklassen implementiert werden."]}),"\n",(0,t.jsx)(n.h2,{id:"2-formativer-selbsttest",children:"2 Formativer Selbsttest"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"PDF Formativer Selbsttest Seite 1",src:r(25509).Z+"",width:"1656",height:"2339"}),"\r\n",(0,t.jsx)(n.img,{alt:"PDF Formativer Selbsttest Seite 2",src:r(73420).Z+"",width:"1656",height:"2339"}),"\r\n",(0,t.jsx)(n.img,{alt:"PDF Formativer Selbsttest Seite 3",src:r(93609).Z+"",width:"1656",height:"2339"}),"\r\n",(0,t.jsx)(n.img,{alt:"PDF Formativer Selbsttest Seite 4",src:r(73378).Z+"",width:"1656",height:"2339"})]}),"\n",(0,t.jsx)(n.h2,{id:"3-unklarheiten",children:"3 Unklarheiten"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Wo zeigt das ",(0,t.jsx)(n.code,{children:"ehepartner.ehepartner"})," hin? (BZT6)"]}),(0,t.jsx)(n.br,{}),"\n","Er zeigt auf den \xdcbergabeparameter, der \xfcbergeben wird. Der \xdcbergabeparameter zeigt auf die Variable ",(0,t.jsx)(n.code,{children:"private Person ehepartner = null"})]})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},25509:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/form_selbsttest_2022-03-04-1-b61d55dcd88815bbece109bc14823f40.png"},73420:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/form_selbsttest_2022-03-04-2-388e6e82b5b32c053f98cd20ee328e4d.png"},93609:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/form_selbsttest_2022-03-04-3-d2ef737fbd6295964b87ff86558d08bb.png"},73378:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/form_selbsttest_2022-03-04-4-1b94162cd9864fff582c99427e9ae44d.png"},88738:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/tag4_01-a1b079b6e78c54a6efb16dd7442f5dc5.svg"},11151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>s});var t=r(67294);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);