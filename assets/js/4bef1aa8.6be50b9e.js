"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[52024],{50135:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(85893),a=t(11151);const i={title:"Tag 5",tags:["M226B","Tag 5","Java","BZTF-Beispiel"]},l="Tag 5",s={id:"M226B/tag-0005",title:"Tag 5",description:"1 Beispiele",source:"@site/docs/M226B/tag-0005.md",sourceDirName:"M226B",slug:"/M226B/tag-0005",permalink:"/docs/M226B/tag-0005",draft:!1,unlisted:!1,tags:[{label:"M226B",permalink:"/docs/tags/m-226-b"},{label:"Tag 5",permalink:"/docs/tags/tag-5"},{label:"Java",permalink:"/docs/tags/java"},{label:"BZTF-Beispiel",permalink:"/docs/tags/bztf-beispiel"}],version:"current",frontMatter:{title:"Tag 5",tags:["M226B","Tag 5","Java","BZTF-Beispiel"]},sidebar:"tutorialSidebar",previous:{title:"Tag 4",permalink:"/docs/M226B/tag-0004"},next:{title:"Tag 6",permalink:"/docs/M226B/tag-0006"}},u={},c=[{value:"1 Beispiele",id:"1-beispiele",level:2},{value:"1.1 BZT10",id:"11-bzt10",level:3}];function h(n){const e={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"tag-5",children:"Tag 5"}),"\n",(0,r.jsx)(e.h2,{id:"1-beispiele",children:"1 Beispiele"}),"\n",(0,r.jsx)(e.h3,{id:"11-bzt10",children:"1.1 BZT10"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'package ch.bztf;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static void main( String[] args )\n    {\n        Lernende lern1 = new Lernende("Moritz", 4711);\n\n        Lehrer lehr1 = new Lehrer("Lempel", 12345, "RitschRatschM\xfchle");\n\n        Angestellte ange1 = new Angestellte("Verwalti", 54321, true);\n\n        Angestellte ange2 = new Angestellte("Schl\xe4ffrig", 345, false);\n\n        System.out.println(lern1.toString());\n        System.out.println(lehr1.toString());\n        System.out.println(ange1.toString());\n        System.out.println(ange2.toString());\n\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\n\n        ange1.heiraten(ange2);\n        lehr1.heiraten(lehr1);\n        ange2.heiraten(lehr1);\n\n        ange1.scheiden();\n        ange2.scheiden();\n        lehr1.scheiden();\n\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\n\n        System.out.println(ange1.equals(ange1));\n        System.out.println(ange1.equals(ange2));\n        Angestellte ange3 = new Angestellte("Schl\xe4ffrig");\n        System.out.println(ange2.equals(ange3));\n        Angestellte ange4 = new Angestellte("Hampelmann");\n        System.out.println(ange1.equals(ange4));\n\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\n\n        // Anzahl wird auf 3 gesetzt, mindestkonsum ist allerdings auf 4\n        System.out.println("Bitte als Angestellter Fr. " + ange1.kantineKonsum(3) + " bezahlen.");\n\n        // Anzahl wird auf 5 gesetzt, mindestkonsum ist allerdings auf 8\n        System.out.println("Bitte als Lehrer Fr. " + lehr1.kantineKonsum(5) + " bezahlen.");\n\n        // Lernender hat kein mindestkonsum. Dazu bekommt er noch 10% Rabatt\n        System.out.println("Bitte als Lernender Fr. " + lern1.kantineKonsum(7) + " bezahlen.");\n\n        System.out.println("#-------------------------------------------------------------------------------------------------------------------------------------------------#");\n\n        System.out.println("Lernender 1: " + lern1.Bewertung());\n        System.out.println("Lernender 1: " + lern1.Bewertung());\n        System.out.println("Angestellter 1: " + ange1.Bewertung());\n    }\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'package ch.bztf;\n\nabstract class Person implements Eatable {\n    protected String nachname;\n    protected final double minpreis = 2.50;\n\n    protected Person(String nachname) {\n        this.nachname = nachname;\n    }\n\n    public void setNachname(String nachname) {\n        this.nachname = nachname;\n    }\n\n    public String getNachname() {\n        return nachname;\n    }\n\n    // public String vorstellen() {\n    //     String output = "Ich heisse " + getNachname() + "! Von der Klasse " + this.getClass() + ".";\n    //     return output;\n    // }\n\n    @Override\n    public String toString() {\n        return nachname + " (Attributquelle: Klasse Person) - " + getClass() + ".";\n    }\n\n    private Person ehepartner = null;   // Die Referenz auf den Ehepartner wird erstellt, aber auf null gesetzt\n                                    // einAngestellter.heiraten(eineAngestellte); Als Hinweis: Der Aufruf im main!\n    protected void heiraten(Person ehepartner) // \n    {\n        if (this != ehepartner) // \xfcberpr\xfcfung ob nicht selber\n        {\n            if(this.ehepartner == null && ehepartner.ehepartner == null) // wenn beide noch nicht verheiratet sind\n            {\n                this.ehepartner = ehepartner; //  person auf ehepartner setzen\n                ehepartner.ehepartner = this; // ?\n\n                System.out.println(nachname + " und " + ehepartner.getNachname() + " haben geheiratet. ");\n            }\n            else // wenn mind. jemand bereits verheiratet ist\n            {\n                System.out.println(nachname + " und " + ehepartner.getNachname() + " k\xf6nnen nicht heiraten, " + "weil mindestens einer bereits verheiratet ist! ");\n            }\n        }\n        else // wenn selber\n        {\n            System.out.println(nachname + " kann sich nicht selber heiraten!");\n        }\n    }\n\n    protected void scheiden() {\n        if (ehepartner != null) {\n            Person temp = ehepartner;\n            ehepartner.ehepartner = null;\n            this.ehepartner = null;\n\n            System.out.println(nachname + " und " + temp.getNachname() + " haben sich geschieden.");\n        } else {\n            System.out.println(nachname + " ist nicht verheiratet.");\n        }\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        } else if (obj == null) {\n            return false;\n        } else if (obj.getClass() == getClass() && this.hashCode() == ((Person)obj).hashCode()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n\n    public abstract double kantineKonsum(int anzahl);\n\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"package ch.bztf;\n\npublic interface Eatable {\n    int inKantine();\n    String Bewertung();\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'package ch.bztf;\n\nabstract class Mitarbeiter extends Person {\n    protected int personalNummer;\n\n    protected Mitarbeiter(String nachname, int personalNummer) {\n        super(nachname);\n        this.personalNummer = personalNummer;\n    }\n\n    protected Mitarbeiter(String nachname) {\n        super(nachname);\n    }\n\n    public void setPersonalNummer(int personalNummer) {\n        this.personalNummer = personalNummer;\n    }\n\n    public int getPersonalNummer() {\n        return personalNummer;\n    }\n\n    // @Override\n    // public String vorstellen() {\n    //     return super.vorstellen() + " Meine Personalnummer ist " + getPersonalNummer() + " und ich";\n    // }\n\n    @Override\n    public String toString() {\n        return super.toString() + " - Personalnummer: " + getPersonalNummer() + " (Attributquelle: Klasse Mitarbeiter).";\n    }\n\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'package ch.bztf;\n\npublic class Lernende extends Person {\n    private int nummer;\n\n    public Lernende(String nachname) {\n        super(nachname);\n    }\n\n    public Lernende(String nachname, int nummer) {\n        super(nachname);\n        this.nummer = nummer;\n    }\n\n    public void setNummer(int nummer) {\n        this.nummer = nummer;\n    }\n\n    public int getNummer() {\n        return nummer;\n    }\n\n    // @Override\n    // public String vorstellen() {\n    //     return super.vorstellen() + " Meine Nummer ist " + getNummer();\n    // }\n\n    @Override\n    public String toString() {\n        return super.toString() + " - Nummer: " + getNummer() + " (Attributquelle: Klasse Lernende).";\n    }\n\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n\n    @Override\n    public double kantineKonsum(int anzahl) {\n        // 10% Rabatt\n        return anzahl * minpreis * 0.9;\n    }\n\n    @Override\n    public int inKantine() {\n        int zufallszahl = (int)(Math.random() * 10);\n        return zufallszahl;\n    }\n\n    @Override\n    public String Bewertung() {\n        if (inKantine() > 5) {\n            int zufallszahl = (int)(Math.random() * 10);\n            if (zufallszahl >= 5) {\n                return "War akzeptabel";\n            } else {\n                return "Hat Verbesserungspotential!";\n            }\n        } else {\n            return "War nicht in Mensa!";\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'package ch.bztf;\n\npublic class Lehrer extends Mitarbeiter {\n    private String fachbereich;\n\n    public Lehrer(String nachname, int personalNummer, String fachbereich) {\n        super(nachname, personalNummer);\n        this.fachbereich = fachbereich;\n    }\n\n    public void setFachbereich(String fachbereich) {\n        this.fachbereich = fachbereich;\n    }\n\n    public String getFachbereich() {\n        return fachbereich;\n    }\n\n    // @Override\n    // public String vorstellen() {\n    //     return super.vorstellen() + " lehre " + getFachbereich();\n    // }\n\n    @Override\n    public String toString() {\n        return super.toString() + " - Fachbereich: " + getFachbereich() + " (Attributquelle: Klasse Lehrer).";\n    }\n\n    @Override\n    public double kantineKonsum(int anzahl) {\n        if (anzahl < 8) {\n            anzahl = 8;\n        }\n        return anzahl * minpreis;\n    }\n\n    @Override\n    public int inKantine() {\n        int zufallszahl = (int)(Math.random() * 10);\n        return zufallszahl;\n    }\n\n    @Override\n    public String Bewertung() {\n        if (inKantine() > 5) {\n            int zufallszahl = (int)(Math.random() * 10);\n            if (zufallszahl >= 5) {\n                return "War akzeptabel";\n            } else {\n                return "Hat Verbesserungspotential!";\n            }\n        } else {\n            return "War nicht in Mensa!";\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'package ch.bztf;\n\npublic class Angestellte extends Mitarbeiter {\n    private boolean schulleitung;\n\n    public Angestellte(String nachname) {\n        super(nachname);\n    }\n\n    public Angestellte(String nachname, int personalNummer) {\n        super(nachname, personalNummer);\n    }\n\n    public Angestellte(String nachname, int personalNummer, boolean schulleitung) {\n        super(nachname, personalNummer);\n        this.schulleitung = schulleitung;\n    }\n\n    public void setSchulleitung(boolean schulleitung) {\n        this.schulleitung = schulleitung;\n    }\n\n    public boolean isSchulleitung() {\n        return schulleitung;\n    }\n\n    // @Override\n    // public String vorstellen() {\n    //     if(isSchulleitung() == false) {\n    //         return super.vorstellen() + " bin einfacher Angestellter";\n    //     } else {\n    //         return super.vorstellen() + " bin Schulleitungsmitglied";\n    //     }\n    // }\n\n    @Override\n    public String toString() {\n        return super.toString() + " - In Schulleitung?: " + isSchulleitung();\n    }\n\n    @Override\n    public double kantineKonsum(int anzahl) {\n        if (anzahl < 4) {\n            anzahl = 4;\n        }\n        return anzahl * minpreis;\n    }\n\n    @Override\n    public int inKantine() {\n        int zufallszahl = (int)(Math.random() * 10);\n        return zufallszahl;\n    }\n\n    @Override\n    public String Bewertung() {\n        if (inKantine() > 5) {\n            int zufallszahl = (int)(Math.random() * 10);\n            if (zufallszahl >= 5) {\n                return "War akzeptabel";\n            } else {\n                return "Hat Verbesserungspotential!";\n            }\n        } else {\n            return "War nicht in Mensa!";\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Interfaces sind Klassen, die nur abstrakte Klassen und Methoden enthalten. Sie haben keinen anderen ausf\xfchrbaren Code enthalten. Interfaces werden wie folgt erstellt:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public interface Eatable {}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["UML:",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.img,{alt:"UML",src:t(87375).Z+"",width:"1026",height:"889"}),(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.a,{href:"/appendix/M226B/UML/tag5_01",children:"Source Code"})]})]})}function o(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}},87375:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/tag5_01-38768ed417dc06bea9fe684db3b48bc2.svg"},11151:(n,e,t)=>{t.d(e,{Z:()=>s,a:()=>l});var r=t(67294);const a={},i=r.createContext(a);function l(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:l(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);