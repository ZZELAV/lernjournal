"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[34184],{28676:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var i=r(85893),s=r(11151);const a={title:"Tag 13",tags:["M141","Tag 13","MongoDB","Design","Schema","Indexierung","Cluster"]},l="Tag 13",o={id:"M141/tag-0013",title:"Tag 13",description:"1 Dokumentationsauftr\xe4ge",source:"@site/docs/M141/tag-0013.md",sourceDirName:"M141",slug:"/M141/tag-0013",permalink:"/docs/M141/tag-0013",draft:!1,unlisted:!1,tags:[{label:"M141",permalink:"/docs/tags/m-141"},{label:"Tag 13",permalink:"/docs/tags/tag-13"},{label:"MongoDB",permalink:"/docs/tags/mongo-db"},{label:"Design",permalink:"/docs/tags/design"},{label:"Schema",permalink:"/docs/tags/schema"},{label:"Indexierung",permalink:"/docs/tags/indexierung"},{label:"Cluster",permalink:"/docs/tags/cluster"}],version:"current",frontMatter:{title:"Tag 13",tags:["M141","Tag 13","MongoDB","Design","Schema","Indexierung","Cluster"]},sidebar:"tutorialSidebar",previous:{title:"Tag 12",permalink:"/docs/M141/tag-0012"},next:{title:"M143",permalink:"/docs/M143/"}},t={},d=[{value:"1 Dokumentationsauftr\xe4ge",id:"1-dokumentationsauftr\xe4ge",level:2},{value:"1.1 Best Practices beim Datenbankdesign",id:"11-best-practices-beim-datenbankdesign",level:3},{value:"1.1.1 Relational vs. Schemaless",id:"111-relational-vs-schemaless",level:4},{value:"1.1.2 Embedding vs. Referencing",id:"112-embedding-vs-referencing",level:4},{value:"Beispiel",id:"beispiel",level:5},{value:"Vor- und Nachteile Referencing",id:"vor--und-nachteile-referencing",level:5},{value:"Vor- und Nachteile Embedding",id:"vor--und-nachteile-embedding",level:5},{value:"1.2 \xdcbung Indexierung",id:"12-\xfcbung-indexierung",level:3},{value:"1.2.1 Vorbereitung",id:"121-vorbereitung",level:4},{value:"1.2.2 Daten generieren",id:"122-daten-generieren",level:4},{value:"1.2.3 Indices auslesen",id:"123-indices-auslesen",level:4},{value:"1.2.4 Testen",id:"124-testen",level:4},{value:"1.2.5 Index erfassen",id:"125-index-erfassen",level:4},{value:"1.3 \xdcbung Replication",id:"13-\xfcbung-replication",level:3},{value:"1.3.1 Vorbereitung",id:"131-vorbereitung",level:4},{value:"1.3.2 Instanzen starten",id:"132-instanzen-starten",level:4},{value:"1.3.3 Starten",id:"133-starten",level:4},{value:"1.3.4 Insert testen",id:"134-insert-testen",level:4},{value:"1.3.5 Replikation testen",id:"135-replikation-testen",level:4},{value:"1.4 \xdcbung Sharding",id:"14-\xfcbung-sharding",level:3},{value:"1.4.1 Vorbereitung I, Config Server",id:"141-vorbereitung-i-config-server",level:4},{value:"1.4.2 Vorbereitung 2, Shards einrichten",id:"142-vorbereitung-2-shards-einrichten",level:4},{value:"1.4.3 Shards initialisieren",id:"143-shards-initialisieren",level:4},{value:"1.4.4 mongos (Query Router)",id:"144-mongos-query-router",level:4},{value:"1.4.5 Shards hinzuf\xfcgen",id:"145-shards-hinzuf\xfcgen",level:4},{value:"1.4.6 Sharding einf\xfchren und testen",id:"146-sharding-einf\xfchren-und-testen",level:4},{value:"1.4.7 Kontrolle",id:"147-kontrolle",level:4},{value:"1.4.8 Anwendung",id:"148-anwendung",level:4}];function c(n){const e={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"tag-13",children:"Tag 13"}),"\n",(0,i.jsx)(e.h2,{id:"1-dokumentationsauftr\xe4ge",children:"1 Dokumentationsauftr\xe4ge"}),"\n",(0,i.jsx)(e.h3,{id:"11-best-practices-beim-datenbankdesign",children:"1.1 Best Practices beim Datenbankdesign"}),"\n",(0,i.jsx)(e.h4,{id:"111-relational-vs-schemaless",children:"1.1.1 Relational vs. Schemaless"}),"\n",(0,i.jsx)(e.p,{children:"Bei relationalen Datenbanken werden Informationen mittels SQL Joins geholt. Da MongoDB allerdings mit Documents und nicht mit Tabellen arbeitet, muss dieses Schema mittels Arrays und Nested Documents abgebildet werden."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\r\n  "first_name": "Paul",\r\n  "surname": "Miller",\r\n  "cell": "447557505611",\r\n  "city": "London",\r\n  "location": [45.123, 47.232],\r\n  "profession": ["banking", "finance", "trader"],\r\n  "cars": [\r\n    {\r\n      "model": "Bentley",\r\n      "year": 1973\r\n    },\r\n    {\r\n      "model": "Rolls Royce",\r\n      "year": 1965\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,i.jsxs)(e.admonition,{title:"MERKE",type:"tip",children:[(0,i.jsx)(e.p,{children:"Anstatt Daten in verschiedene Tabellen aufzusplitten, nutzen wir Arrays und Nested Documents um Informationen strukturiert abbilden zu k\xf6nnen."}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Wichtig: in diesem Fall keine separaten Collections erstellen"})})]}),"\n",(0,i.jsx)(e.h4,{id:"112-embedding-vs-referencing",children:"1.1.2 Embedding vs. Referencing"}),"\n",(0,i.jsxs)(e.p,{children:["Um bei MongoDB FKs und PKs zu erzwingen, muss das ",(0,i.jsx)(e.code,{children:"Referencing"})," mittels des Operators ",(0,i.jsx)(e.code,{children:"$lookup"})," genutzt werden. ",(0,i.jsx)(e.code,{children:"$lookup"})," kann mit einem ",(0,i.jsx)(e.code,{children:"LEFT OUTER JOIN"})," verglichen werden."]}),"\n",(0,i.jsx)(e.h5,{id:"beispiel",children:"Beispiel"}),"\n",(0,i.jsxs)(e.p,{children:["Collection ",(0,i.jsx)(e.code,{children:"order"})," erstellen:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'db.orders.insertMany( [\r\n   { "_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2 },\r\n   { "_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1 },\r\n   { "_id" : 3  }\r\n] )\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Collection ",(0,i.jsx)(e.code,{children:"inventory"})," erstellen:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'db.inventory.insertMany( [\r\n   { "_id" : 1, "sku" : "almonds", "description": "product 1", "instock" : 120 },\r\n   { "_id" : 2, "sku" : "bread", "description": "product 2", "instock" : 80 },\r\n   { "_id" : 3, "sku" : "cashews", "description": "product 3", "instock" : 60 },\r\n   { "_id" : 4, "sku" : "pecans", "description": "product 4", "instock" : 70 },\r\n   { "_id" : 5, "sku": null, "description": "Incomplete" },\r\n   { "_id" : 6 }\r\n] )\n'})}),"\n",(0,i.jsx)(e.p,{children:"Die Collections verkn\xfcpfen (referenzieren):"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'db.orders.aggregate( [\r\n   {\r\n     $lookup:\r\n       {\r\n         from: "inventory",\r\n         localField: "item",\r\n         foreignField: "sku",\r\n         as: "inventory_docs"\r\n       }\r\n  }\r\n] )\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",metastring:'title="OUTPUT"',children:'{\r\n   "_id" : 1,\r\n   "item" : "almonds",\r\n   "price" : 12,\r\n   "quantity" : 2,\r\n   "inventory_docs" : [\r\n      { "_id" : 1, "sku" : "almonds", "description" : "product 1", "instock" : 120 }\r\n   ]\r\n}\r\n{\r\n   "_id" : 2,\r\n   "item" : "pecans",\r\n   "price" : 20,\r\n   "quantity" : 1,\r\n   "inventory_docs" : [\r\n      { "_id" : 4, "sku" : "pecans", "description" : "product 4", "instock" : 70 }\r\n   ]\r\n}\r\n{\r\n   "_id" : 3,\r\n   "inventory_docs" : [\r\n      { "_id" : 5, "sku" : null, "description" : "Incomplete" },\r\n      { "_id" : 6 }\r\n   ]\r\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/",children:"Weitere Informationen"})}),"\n",(0,i.jsx)(e.h5,{id:"vor--und-nachteile-referencing",children:"Vor- und Nachteile Referencing"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Vorteile"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Kleinere Documents"}),"\n",(0,i.jsx)(e.li,{children:"Documents k\xf6nnen kleiner als 16MB gehalten werden (Limit von BSON)"}),"\n",(0,i.jsx)(e.li,{children:"N\xfctzlich wenn nicht alle Daten oft aufgerufen werden m\xfcssen"}),"\n",(0,i.jsx)(e.li,{children:"Weniger Redundanzen in den Informationen"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Nachteile"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Komplizierte Abfragen"}),"\n"]}),"\n",(0,i.jsx)(e.h5,{id:"vor--und-nachteile-embedding",children:"Vor- und Nachteile Embedding"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Vorteile"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Eine Query = alle Daten laden"}),"\n",(0,i.jsx)(e.li,{children:"Keine Joins"}),"\n",(0,i.jsx)(e.li,{children:"CRUD-Operationen sind ACID-f\xe4hig"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Nachteile"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Query auf grosse Documents kann (bei doppelten Daten) die Performance beeinflussen"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"12-\xfcbung-indexierung",children:"1.2 \xdcbung Indexierung"}),"\n",(0,i.jsx)(e.h4,{id:"121-vorbereitung",children:"1.2.1 Vorbereitung"}),"\n",(0,i.jsxs)(e.p,{children:["Neue Datenbank ",(0,i.jsx)(e.code,{children:"phones"})," erstellen:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"use phones\n"})}),"\n",(0,i.jsx)(e.p,{children:"Funktion importieren um Testdaten zu generieren:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'    populatePhones = function(area, start, stop) {\r\n      for(var i = start; i < stop; i++) {\r\n        var country = 1 + ((Math.random() * 8) << 0);\r\n        var num = (country * 1e10) + (area * 1e7) + i;\r\n        var fullNumber = "+" + country + " " + area + "-" + i;\r\n        db.phones.insert({\r\n          _id: num,\r\n          components: {\r\n            country: country,\r\n            area: area,\r\n            prefix: (i * 1e-4) << 0,\r\n            number: i\r\n          },\r\n          display: fullNumber\r\n        });\r\n        print("Inserted number " + fullNumber);\r\n      }\r\n      print("Done!");\r\n    }\n'})}),"\n",(0,i.jsx)(e.h4,{id:"122-daten-generieren",children:"1.2.2 Daten generieren"}),"\n",(0,i.jsx)(e.p,{children:"Daten generieren:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"populatePhones(800, 5550000, 5650000)\n"})}),"\n",(0,i.jsx)(e.p,{children:"Daten kontrollieren:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"db.phones.find().limit(2)\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",metastring:'title="OUTPUT"',children:"[\r\n  {\r\n    _id: 88005550000,\r\n    components: { country: 8, area: 800, prefix: 555, number: 5550000 },\r\n    display: '+8 800-5550000'\r\n  },\r\n  {\r\n    _id: 28005550001,\r\n    components: { country: 2, area: 800, prefix: 555, number: 5550001 },\r\n    display: '+2 800-5550001'\r\n  }\r\n]\n"})}),"\n",(0,i.jsx)(e.h4,{id:"123-indices-auslesen",children:"1.2.3 Indices auslesen"}),"\n",(0,i.jsx)(e.p,{children:"Indices der bestehenden Collections anzeigen:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'db.getCollectionNames().forEach(function(collection) {\r\n     print("Indexes for the " + collection + " collection:");\r\n     printjson(db[collection].getIndexes());\r\n});\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",metastring:'title="OUTPUT"',children:"Indexes for the phones collection:\r\n[\r\n  {\r\n    v: 2,\r\n    key: {\r\n      _id: 1\r\n    },\r\n    name: '_id_'\r\n  }\r\n]\n"})}),"\n",(0,i.jsx)(e.h4,{id:"124-testen",children:"1.2.4 Testen"}),"\n",(0,i.jsx)(e.p,{children:"Perfomance ohne Indices testen:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'db.phones.explain("executionStats").find({display: "+1 800-5650001"})\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",metastring:'title="OUTPUT"',children:"...\r\nexecutionTimeMillis: 61, // Ausf\xfchrzeit in Millisekunden\r\n...\r\ntotalDocsExamined: 100000, // Anzahl Documents\r\n...\r\nstage: 'COLLSCAN', // Typ des Scans\r\n...\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.img,{alt:"MongoDB Stages",src:r(6371).Z+"",width:"621",height:"279"}),(0,i.jsx)(e.br,{}),"\n",(0,i.jsx)(e.a,{href:"https://www.mongodb.com/docs/manual/reference/explain-results/",children:"https://www.mongodb.com/docs/manual/reference/explain-results/"})]}),"\n",(0,i.jsx)(e.h4,{id:"125-index-erfassen",children:"1.2.5 Index erfassen"}),"\n",(0,i.jsx)(e.p,{children:"Index erstellen"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"db.phones.createIndex(\r\n  { display : 1 },\r\n  { unique : true, dropDups : true }\r\n)\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Die Indexe sollen ",(0,i.jsx)(e.code,{children:"unique"})," sein und ",(0,i.jsx)(e.code,{children:"dropDups"})," entfernt Duplikate."]}),"\n",(0,i.jsx)(e.p,{children:"Perfomance nochmals mit Indices testen."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",metastring:'title="OUTPUT"',children:"...\r\nexecutionTimeMillis: 1,\r\n...\r\ntotalDocsExamined: 0,\r\n...\r\nstage: 'FETCH',\r\n...\n"})}),"\n",(0,i.jsx)(e.h3,{id:"13-\xfcbung-replication",children:"1.3 \xdcbung Replication"}),"\n",(0,i.jsx)(e.h4,{id:"131-vorbereitung",children:"1.3.1 Vorbereitung"}),"\n",(0,i.jsx)(e.p,{children:"Data-Directories f\xfcr 3 MongoDB-Instanzen erstellen:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"mkdir ./mongo1 ./mongo2 ./mongo3\n"})}),"\n",(0,i.jsx)(e.h4,{id:"132-instanzen-starten",children:"1.3.2 Instanzen starten"}),"\n",(0,i.jsx)(e.p,{children:"Pro Instanz ein Terminal (muss offen bleiben):"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"mongod --replSet book --dbpath ./mongo1 --port 27011\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"mongod --replSet book --dbpath ./mongo2 --port 27012\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"mongod --replSet book --dbpath ./mongo3 --port 27013\n"})}),"\n",(0,i.jsx)(e.h4,{id:"133-starten",children:"1.3.3 Starten"}),"\n",(0,i.jsx)(e.p,{children:"Auf eine Instanz per Shell einloggen und Initialisierung f\xfcr Replikation starten:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"rs.initiate({\r\n    _id: 'book',\r\n    members: [\r\n      {_id: 1, host: 'localhost:27011'},\r\n      {_id: 2, host: 'localhost:27012'},\r\n      {_id: 3, host: 'localhost:27013'}\r\n    ]\r\n})\n"})}),"\n",(0,i.jsx)(e.p,{children:"Status kontrollieren:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"rs.status().ok\n"})}),"\n",(0,i.jsx)(e.h4,{id:"134-insert-testen",children:"1.3.4 Insert testen"}),"\n",(0,i.jsxs)(e.admonition,{title:"ACHTUNG",type:"caution",children:[(0,i.jsx)(e.p,{children:"Verbindung auf gesamten Cluster muss genutzt werden."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"mongo mongodb://localhost:27011,localhost:27012,localhost:27013/replicaSet=book\n"})})]}),"\n",(0,i.jsx)(e.p,{children:"Ersten Test-Insert durchf\xfchren:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"db.echo.insert({ say : 'HELLO!' })\n"})}),"\n",(0,i.jsx)(e.p,{children:"Auf den Terminals der Instanzen sollte viel Output angezeigt werden."}),"\n",(0,i.jsx)(e.p,{children:"Resultat des Tests \xfcberpr\xfcfen:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"db.echo.find()\n"})}),"\n",(0,i.jsx)(e.h4,{id:"135-replikation-testen",children:"1.3.5 Replikation testen"}),"\n",(0,i.jsx)(e.p,{children:"Eine Instanz killen. Die anderen Instanzen sollten weiter funktionieren."}),"\n",(0,i.jsx)(e.h3,{id:"14-\xfcbung-sharding",children:"1.4 \xdcbung Sharding"}),"\n",(0,i.jsx)(e.p,{children:"Folgende Grafik ist das Ziel:"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"Ziel Sharding MongoDB",src:r(82453).Z+"",width:"1280",height:"452"})}),"\n",(0,i.jsx)(e.h4,{id:"141-vorbereitung-i-config-server",children:"1.4.1 Vorbereitung I, Config Server"}),"\n",(0,i.jsx)(e.p,{children:"Config-Ordner erstellen und Instanz starten:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'mkdir ./mongoconfig\r\nmongod --configsvr --replSet "config" --dbpath ./mongoconfig --port 27016\n'})}),"\n",(0,i.jsx)(e.p,{children:"Auf Server einloggen:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"mongosh localhost:27016\n"})}),"\n",(0,i.jsx)(e.p,{children:"Cluster initialisieren:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"rs.initiate()\n"})}),"\n",(0,i.jsx)(e.h4,{id:"142-vorbereitung-2-shards-einrichten",children:"1.4.2 Vorbereitung 2, Shards einrichten"}),"\n",(0,i.jsx)(e.p,{children:"Data-Verzeichnisse einrichten:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"mkdir ./mongo4 ./mongo5\n"})}),"\n",(0,i.jsx)(e.p,{children:"Zwei Instanzen als Shard-Server starten:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'mongod --shardsvr --replSet "shard1" --dbpath ./mongo4 --port 27020\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'mongod --shardsvr --replSet "shard2" --dbpath ./mongo5 --port 27021\n'})}),"\n",(0,i.jsx)(e.h4,{id:"143-shards-initialisieren",children:"1.4.3 Shards initialisieren"}),"\n",(0,i.jsx)(e.p,{children:"Auf beide Shards verbinden und initialisieren:"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Shard 1"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"mongosh localhost:27020\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"rs.initiate()\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Shard 1"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"mongosh localhost:27021\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"rs.initiate()\n"})}),"\n",(0,i.jsxs)(e.admonition,{type:"info",children:[(0,i.jsx)(e.p,{children:"Aktuelle Konfiguration \xfcberpr\xfcfen:"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"rs.status()\n"})})]}),"\n",(0,i.jsx)(e.h4,{id:"144-mongos-query-router",children:"1.4.4 mongos (Query Router)"}),"\n",(0,i.jsx)(e.p,{children:"Mongos-Instanz starten (Verbindung mit Config-Server wird aufgebaut):"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"mongos --configdb config/localhost:27016 --port 27025\n"})}),"\n",(0,i.jsx)(e.h4,{id:"145-shards-hinzuf\xfcgen",children:"1.4.5 Shards hinzuf\xfcgen"}),"\n",(0,i.jsx)(e.p,{children:"Auf mongos-Instanz verbinden:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"mongosh localhost:27025\n"})}),"\n",(0,i.jsx)(e.p,{children:"Shards hinzuf\xfcgen:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'sh.addShard("shard1/localhost:27020")\r\nsh.addShard("shard2/localhost:27021")\n'})}),"\n",(0,i.jsx)(e.p,{children:"Status der Shards kontrollieren:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"sh.status()\n"})}),"\n",(0,i.jsx)(e.h4,{id:"146-sharding-einf\xfchren-und-testen",children:"1.4.6 Sharding einf\xfchren und testen"}),"\n",(0,i.jsx)(e.p,{children:"Sharding ist zwar aktiviert, aber noch nicht konfiguriert."}),"\n",(0,i.jsxs)(e.p,{children:["Auf der Datenbank ",(0,i.jsx)(e.code,{children:"populations"})," Sharding aktivieren (auf mongos-Instanz):"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'sh.enableSharding("population")\n'})}),"\n",(0,i.jsxs)(e.p,{children:["Collection ",(0,i.jsx)(e.code,{children:"cities"})," auf die Shards aufteilen. Dies mit einem Hashing auf dem Attribut ",(0,i.jsx)(e.code,{children:"country"})," als Shardkey:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'sh.shardCollection("populations.cities", { "country": "hashed" })\n'})}),"\n",(0,i.jsx)(e.p,{children:"Neue Datens\xe4tze einf\xfcgen:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:'use populations\r\n\r\ndb.cities.insertMany([\r\n  {"name": "Seoul", "country": "South Korea", "continent": "Asia", "population": 25.674 },\r\n  {"name": "Mumbai", "country": "India", "continent": "Asia", "population": 19.980 },\r\n  {"name": "Lagos", "country": "Nigeria", "continent": "Africa", "population": 13.463 },\r\n  {"name": "Beijing", "country": "China", "continent": "Asia", "population": 19.618 },\r\n  {"name": "Shanghai", "country": "China", "continent": "Asia", "population": 25.582 },\r\n  {"name": "Osaka", "country": "Japan", "continent": "Asia", "population": 19.281 },\r\n  {"name": "Cairo", "country": "Egypt", "continent": "Africa", "population": 20.076 },\r\n  {"name": "Tokyo", "country": "Japan", "continent": "Asia", "population": 37.400 },\r\n  {"name": "Karachi", "country": "Pakistan", "continent": "Asia", "population": 15.400 },\r\n  {"name": "Dhaka", "country": "Bangladesh", "continent": "Asia", "population": 19.578 },\r\n  {"name": "Rio de Janeiro", "country": "Brazil", "continent": "South America", "population": 13.293 },\r\n  {"name": "S\xe3o Paulo", "country": "Brazil", "continent": "South America", "population": 21.650 },\r\n  {"name": "Mexico City", "country": "Mexico", "continent": "North America", "population": 21.581 },\r\n  {"name": "Delhi", "country": "India", "continent": "Asia", "population": 28.514 },\r\n  {"name": "Buenos Aires", "country": "Argentina", "continent": "South America", "population": 14.967 },\r\n  {"name": "Kolkata", "country": "India", "continent": "Asia", "population": 14.681 },\r\n  {"name": "New York", "country": "United States", "continent": "North America", "population": 18.819 },\r\n  {"name": "Manila", "country": "Philippines", "continent": "Asia", "population": 13.482 },\r\n  {"name": "Chongqing", "country": "China", "continent": "Asia", "population": 14.838 },\r\n  {"name": "Istanbul", "country": "Turkey", "continent": "Europe", "population": 14.751 }\r\n])\n'})}),"\n",(0,i.jsx)(e.h4,{id:"147-kontrolle",children:"1.4.7 Kontrolle"}),"\n",(0,i.jsx)(e.p,{children:"Statistiken f\xfcr Shards anzeigen:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"db.cities.getShardDistribution()\n"})}),"\n",(0,i.jsx)(e.h4,{id:"148-anwendung",children:"1.4.8 Anwendung"}),"\n",(0,i.jsxs)(e.p,{children:["Wenn jetzt ein ",(0,i.jsx)(e.code,{children:"find()"})," mit dem ",(0,i.jsx)(e.code,{children:"explain()"})," untersucht wird, kann man das Sharding sehen:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mongodb",children:"db.cities.find().explain()\n"})})]})}function h(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},6371:(n,e,r)=>{r.d(e,{Z:()=>i});const i=r.p+"assets/images/mongodb_stage-779420e4e8b6156a56c568df728afcd6.png"},82453:(n,e,r)=>{r.d(e,{Z:()=>i});const i=r.p+"assets/images/sharding_mongodb_ziel-c7ac4673a2e285c045270fc10893b7cd.png"},11151:(n,e,r)=>{r.d(e,{Z:()=>o,a:()=>l});var i=r(67294);const s={},a=i.createContext(s);function l(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:l(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);