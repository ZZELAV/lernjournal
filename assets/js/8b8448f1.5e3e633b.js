"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6439],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=a.createContext({}),s=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(m.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,g=u["".concat(m,".").concat(d)]||u[d]||p[d]||i;return t?a.createElement(g,l(l({ref:n},c),{},{components:t})):a.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},43352:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const i={title:"Tag 6",tags:["M122","Tag 6","Powershell","WMI","CIM"]},l="Tag 6: WMI und CIM",o={unversionedId:"M122/tag-0006",id:"M122/tag-0006",title:"Tag 6",description:"1 Windows Management Instrumentation (WMI)",source:"@site/docs/M122/tag-0006.md",sourceDirName:"M122",slug:"/M122/tag-0006",permalink:"/docs/M122/tag-0006",draft:!1,tags:[{label:"M122",permalink:"/docs/tags/m-122"},{label:"Tag 6",permalink:"/docs/tags/tag-6"},{label:"Powershell",permalink:"/docs/tags/powershell"},{label:"WMI",permalink:"/docs/tags/wmi"},{label:"CIM",permalink:"/docs/tags/cim"}],version:"current",frontMatter:{title:"Tag 6",tags:["M122","Tag 6","Powershell","WMI","CIM"]},sidebar:"tutorialSidebar",previous:{title:"Tag 5",permalink:"/docs/M122/tag-0005"},next:{title:"Tag 7",permalink:"/docs/M122/tag-0007"}},m={},s=[{value:"1 Windows Management Instrumentation (WMI)",id:"1-windows-management-instrumentation-wmi",level:2},{value:"2 \xdcbungen zu WMI",id:"2-\xfcbungen-zu-wmi",level:2}],c={toc:s},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tag-6-wmi-und-cim"},"Tag 6: WMI und CIM"),(0,r.kt)("h2",{id:"1-windows-management-instrumentation-wmi"},"1 Windows Management Instrumentation (WMI)"),(0,r.kt)("p",null,"WMI ist seit Windows 2000 ein Teil von Windows. Es kann genutzt werden, um fast alle Eigenschaften von einem Ger\xe4t (auch \xfcber Remote) herauszulesen. Powershell hat standardm\xe4ssig einen vollen WMI-Support. Um alle WMI-Commands auszulesen, kann das ",(0,r.kt)("inlineCode",{parentName:"p"},"Get-Command")," Cmdlet genutzt werden.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"get-command -noun WMI*\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"title='Output'",title:"'Output'"},"CommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nCmdlet          Get-WmiObject                                      3.1.0.0    Microsoft.PowerShell.Management\nCmdlet          Invoke-WmiMethod                                   3.1.0.0    Microsoft.PowerShell.Management\nCmdlet          Register-WmiEvent                                  3.1.0.0    Microsoft.PowerShell.Management\nCmdlet          Remove-WmiObject                                   3.1.0.0    Microsoft.PowerShell.Management\nCmdlet          Set-WmiInstance                                    3.1.0.0    Microsoft.PowerShell.Management\n")),(0,r.kt)("p",null,"Eine Alternative zu WMI ist Common Information Model (CIM). Es wurde in PowerShell v3.0 eingef\xfchrt. CIM kann auf Windows, sowie auf nicht-Windows Rechnern genutzt werden. Auch hier kann das Cmdlet ",(0,r.kt)("inlineCode",{parentName:"p"},"Get-Command")," genutzt werden um alle CIM-Commands anzuzeigen.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"get-command -module cimcmdlets\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:"title='Output'",title:"'Output'"},"CommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------ \nCmdlet          Export-BinaryMiLog                                 1.0.0.0    cimcmdlets\nCmdlet          Get-CimAssociatedInstance                          1.0.0.0    cimcmdlets\nCmdlet          Get-CimClass                                       1.0.0.0    cimcmdlets\nCmdlet          Get-CimInstance                                    1.0.0.0    cimcmdlets\nCmdlet          Get-CimSession                                     1.0.0.0    cimcmdlets\nCmdlet          Import-BinaryMiLog                                 1.0.0.0    cimcmdlets\nCmdlet          Invoke-CimMethod                                   1.0.0.0    cimcmdlets\nCmdlet          New-CimInstance                                    1.0.0.0    cimcmdlets\nCmdlet          New-CimSession                                     1.0.0.0    cimcmdlets\nCmdlet          New-CimSessionOption                               1.0.0.0    cimcmdlets\nCmdlet          Register-CimIndicationEvent                        1.0.0.0    cimcmdlets\nCmdlet          Remove-CimInstance                                 1.0.0.0    cimcmdlets\nCmdlet          Remove-CimSession                                  1.0.0.0    cimcmdlets\nCmdlet          Set-CimInstance                                    1.0.0.0    cimcmdlets\n")),(0,r.kt)("p",null,"WMI und CIM k\xf6nnen auch mit SQL-Abfragen genutzt werden.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"get-wmiobject -query 'select * from win32_bios'\n")),(0,r.kt)("p",null,"Allerdings kann auch das normale Powershell-Schema genutzt werden.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"get-wmiobject win32_bios\n")),(0,r.kt)("admonition",{title:"Alias get-wmiobject",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Zum Cmdlet ",(0,r.kt)("inlineCode",{parentName:"p"},"get-wmiobject")," gibt es den Alias ",(0,r.kt)("inlineCode",{parentName:"p"},"gwmi"))),(0,r.kt)("h2",{id:"2-\xfcbungen-zu-wmi"},"2 \xdcbungen zu WMI"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Schreiben Sie eine Funktion, welche die freie Diskkapazit\xe4t pro Disk in GB in einer Hashtable zur\xfcckgibt (Win32_LogicalDisk)."),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"gwmi win32_logicaldisk | foreach {$_.name, ($_.freespace /1GB)}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Schreiben Sie eine Funktion, welche die totale RAM-Kapazit\xe4t in GB zur\xfcckgibt (Win32_PhysicalMemory)."),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"gwmi win32_physicalmemory | foreach {$_.capacity /1GB}\ngwmi win32_physicalmemory | foreach {$_.capacity /1GB} | measure -sum | foreach {$_.sum}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Schreiben Sie eine Funktion, welche die freie RAM-Kapazit\xe4t zur\xfcckgibt (Win32_OperatingSystem)."),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"gwmi win32_operatingsystem | foreach {$_.freephysicalmemory /1E+6}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Schreiben Sie eine Funktion, welche alle lokalen Benutzer (Benutzernamen) in einem Array zur\xfcckgibt (Win32_UserAccount)."),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"gwmi win32_useraccount | foreach {$_.name}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Schreiben Sie eine Funktion, welche Name und Pfad aller Freigaben zur\xfcckgibt."),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"gwmi win32_share | select {$_.name, $_.path}\ngwmi win32_share | foreach {$_.name, $_.path}\n")))}p.isMDXComponent=!0}}]);