"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[91490],{47147:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(85893),a=n(11151);const r={},s="bootstrap.sh",i={id:"M182/bootstrap_sh",title:"bootstrap.sh",description:"",source:"@site/appendix/M182/bootstrap_sh.md",sourceDirName:"M182",slug:"/M182/bootstrap_sh",permalink:"/appendix/M182/bootstrap_sh",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"apt list --installed",permalink:"/appendix/M182/apt_installed"},next:{title:"Sysmon Config",permalink:"/appendix/M182/sysmon_config"}},l={},c=[];function p(e){const t={code:"code",h1:"h1",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"bootstrapsh",children:"bootstrap.sh"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sh",children:'#! /bin/bash\n\n# Override existing DNS Settings using netplan, but don\'t do it for Terraform builds\nif ! curl -s 169.254.169.254 --connect-timeout 2 >/dev/null; then\n  echo -e "    eth1:\\n      dhcp4: true\\n      nameservers:\\n        addresses: [8.8.8.8,8.8.4.4]" >>/etc/netplan/01-netcfg.yaml\n  netplan apply\nfi\nsed -i \'s/nameserver 127.0.0.53/nameserver 8.8.8.8/g\' /etc/resolv.conf && chattr +i /etc/resolv.conf\n\nexport DEBIAN_FRONTEND=noninteractive\necho "apt-fast apt-fast/maxdownloads string 10" | debconf-set-selections\necho "apt-fast apt-fast/dlflag boolean true" | debconf-set-selections\n\n# sed -i "2ideb mirror://mirrors.ubuntu.com/mirrors.txt bionic main restricted universe multiverse\\ndeb mirror://mirrors.ubuntu.com/mirrors.txt bionic-updates main restricted universe multiverse\\ndeb mirror://mirrors.ubuntu.com/mirrors.txt bionic-backports main restricted universe multiverse\\ndeb mirror://mirrors.ubuntu.com/mirrors.txt bionic-security main restricted universe multiverse" /etc/apt/sources.list\n\napt_install_prerequisites() {\n  echo "[$(date +%H:%M:%S)]: Adding apt repositories..."\n  # Add repository for apt-fast\n  add-apt-repository -y ppa:apt-fast/stable\n  # Add repository for yq\n  add-apt-repository -y ppa:rmescandon/yq\n  # Add repository for suricata\n  add-apt-repository -y ppa:oisf/suricata-stable\n  # Install prerequisites and useful tools\n  echo "[$(date +%H:%M:%S)]: Running apt-get clean..."\n  apt-get clean\n  echo "[$(date +%H:%M:%S)]: Running apt-get update..."\n  apt-get -qq update\n  apt-get -qq install -y apt-fast\n  echo "[$(date +%H:%M:%S)]: Running apt-fast install..."\n  apt-fast -qq install -y jq whois build-essential git unzip htop yq mysql-server redis-server python-pip\n}\n\nmodify_motd() {\n  echo "[$(date +%H:%M:%S)]: Updating the MOTD..."\n  # Force color terminal\n  sed -i \'s/#force_color_prompt=yes/force_color_prompt=yes/g\' /root/.bashrc\n  sed -i \'s/#force_color_prompt=yes/force_color_prompt=yes/g\' /home/vagrant/.bashrc\n  # Remove some stock Ubuntu MOTD content\n  chmod -x /etc/update-motd.d/10-help-text\n  # Copy the DetectionLab MOTD\n  cp /vagrant/resources/logger/20-detectionlab /etc/update-motd.d/\n  chmod +x /etc/update-motd.d/20-detectionlab\n}\n\ntest_prerequisites() {\n  for package in jq whois build-essential git unzip yq mysql-server redis-server python-pip; do\n    echo "[$(date +%H:%M:%S)]: [TEST] Validating that $package is correctly installed..."\n    # Loop through each package using dpkg\n    if ! dpkg -S $package >/dev/null; then\n      # If which returns a non-zero return code, try to re-install the package\n      echo "[-] $package was not found. Attempting to reinstall."\n      apt-get -qq update && apt-get install -y $package\n      if ! which $package >/dev/null; then\n        # If the reinstall fails, give up\n        echo "[X] Unable to install $package even after a retry. Exiting."\n        exit 1\n      fi\n    else\n      echo "[+] $package was successfully installed!"\n    fi\n  done\n}\n\nfix_eth1_static_ip() {\n  USING_KVM=$(sudo lsmod | grep kvm)\n  if [ ! -z "$USING_KVM" ]; then\n    echo "[*] Using KVM, no need to fix DHCP for eth1 iface"\n    return 0\n  fi\n  # There\'s a fun issue where dhclient keeps messing with eth1 despite the fact\n  # that eth1 has a static IP set. We workaround this by setting a static DHCP lease.\n  echo -e \'interface "eth1" {\n    send host-name = gethostname();\n    send dhcp-requested-address 192.168.38.105;\n  }\' >>/etc/dhcp/dhclient.conf\n  netplan apply\n  # Fix eth1 if the IP isn\'t set correctly\n  ETH1_IP=$(ip -4 addr show eth1 | grep -oP \'(?<=inet\\s)\\d+(\\.\\d+){3}\')\n  if [ "$ETH1_IP" != "192.168.38.105" ]; then\n    echo "Incorrect IP Address settings detected. Attempting to fix."\n    ifdown eth1\n    ip addr flush dev eth1\n    ifup eth1\n    ETH1_IP=$(ifconfig eth1 | grep \'inet addr\' | cut -d \':\' -f 2 | cut -d \' \' -f 1)\n    if [ "$ETH1_IP" == "192.168.38.105" ]; then\n      echo "[$(date +%H:%M:%S)]: The static IP has been fixed and set to 192.168.38.105"\n    else\n      echo "[$(date +%H:%M:%S)]: Failed to fix the broken static IP for eth1. Exiting because this will cause problems with other VMs."\n      exit 1\n    fi\n  fi\n\n  # Make sure we do have a DNS resolution\n  while true; do\n    if [ "$(dig +short @8.8.8.8 github.com)" ]; then break; fi\n    sleep 1\n  done\n}\n\ndownload_palantir_osquery_config() {\n  if [ -f /opt/osquery-configuration ]; then\n    echo "[$(date +%H:%M:%S)]: osquery configs have already been downloaded"\n  else\n    # Import Palantir osquery configs into Fleet\n    echo "[$(date +%H:%M:%S)]: Downloading Palantir osquery configs..."\n    cd /opt && git clone https://github.com/palantir/osquery-configuration.git\n  fi\n}\n\ninstall_fleet_import_osquery_config() {\n  if [ -f "/opt/fleet" ]; then\n    echo "[$(date +%H:%M:%S)]: Fleet is already installed"\n  else\n    cd /opt || exit 1\n\n    echo "[$(date +%H:%M:%S)]: Installing Fleet..."\n    echo -e "\\n127.0.0.1       kolide" >>/etc/hosts\n    echo -e "\\n127.0.0.1       logger" >>/etc/hosts\n\n    mysql -uroot -e "ALTER USER \'root\'@\'localhost\' IDENTIFIED WITH mysql_native_password BY \'kolide\';"\n    mysql -uroot -pkolide -e "create database kolide;"\n\n    wget --progress=bar:force https://github.com/kolide/fleet/releases/download/3.0.0/fleet.zip\n    unzip fleet.zip -d fleet\n    cp fleet/linux/fleetctl /usr/local/bin/fleetctl && chmod +x /usr/local/bin/fleetctl\n    cp fleet/linux/fleet /usr/local/bin/fleet && chmod +x /usr/local/bin/fleet\n\n    fleet prepare db --mysql_address=127.0.0.1:3306 --mysql_database=kolide --mysql_username=root --mysql_password=kolide\n\n    cp /vagrant/resources/fleet/server.* /opt/fleet/\n    cp /vagrant/resources/fleet/fleet.service /etc/systemd/system/fleet.service\n\n    mkdir /var/log/kolide\n\n    /bin/systemctl enable fleet.service\n    /bin/systemctl start fleet.service\n\n    echo "[$(date +%H:%M:%S)]: Waiting for fleet service..."\n    # while true; do\n    #   result=$(curl --silent -k https://192.168.38.105:8412)\n    #   if echo $result | grep -q setup; then break; fi\n    #   sleep 1\n    # done\n\n    fleetctl config set --address https://192.168.38.105:8412\n    fleetctl config set --tls-skip-verify true\n    fleetctl setup --email info@cyberdefenders.org --username vagrant --password vagrant --org-name DetectionLabELK\n    fleetctl login --email info@cyberdefenders.org --password vagrant\n\n    # Set the enrollment secret to match what we deploy to Windows hosts\n    mysql -uroot --password=kolide -e \'use kolide; update enroll_secrets set secret = "enrollmentsecret" where active=1;\'\n    echo "Updated enrollment secret"\n\n    # Change the query invervals to reflect a lab environment\n    # Every hour -> Every 3 minutes\n    # Every 24 hours -> Every 15 minutes\n    sed -i \'s/interval: 3600/interval: 180/g\' osquery-configuration/Fleet/Endpoints/MacOS/osquery.yaml\n    sed -i \'s/interval: 3600/interval: 180/g\' osquery-configuration/Fleet/Endpoints/Windows/osquery.yaml\n    sed -i \'s/interval: 28800/interval: 900/g\' osquery-configuration/Fleet/Endpoints/MacOS/osquery.yaml\n    sed -i \'s/interval: 28800/interval: 900/g\' osquery-configuration/Fleet/Endpoints/Windows/osquery.yaml\n\n    # Don\'t log osquery INFO messages\n    # Fix snapshot event formatting\n    fleetctl get options >/tmp/options.yaml\n    /usr/bin/yq w -i /tmp/options.yaml \'spec.config.options.logger_snapshot_event_type\' \'true\'\n    sed -i \'s/kind: option/kind: options/g\' /tmp/options.yaml\n    fleetctl apply -f /tmp/options.yaml\n\n    # Use fleetctl to import YAML files\n    fleetctl apply -f osquery-configuration/Fleet/Endpoints/MacOS/osquery.yaml\n    fleetctl apply -f osquery-configuration/Fleet/Endpoints/Windows/osquery.yaml\n    for pack in osquery-configuration/Fleet/Endpoints/packs/*.yaml; do\n      fleetctl apply -f "$pack"\n    done\n  fi\n}\n\ninstall_zeek() {\n  echo "[$(date +%H:%M:%S)]: Installing Zeek..."\n  # Environment variables\n  NODECFG=/opt/zeek/etc/node.cfg\n  touch /opt/zeek/etc/node.cfg\n  touch /opt/zeek/share/zeek/site/local.zeek\n  # SPLUNK_ZEEK_JSON=/opt/splunk/etc/apps/Splunk_TA_bro\n  # SPLUNK_ZEEK_MONITOR=\'monitor:///opt/zeek/spool/manager\'\n  # SPLUNK_SURICATA_MONITOR=\'monitor:///var/log/suricata\'\n  # SPLUNK_SURICATA_SOURCETYPE=\'json_suricata\'\n  sh -c "echo \'deb http://download.opensuse.org/repositories/security:/zeek/xUbuntu_18.04/ /\' > /etc/apt/sources.list.d/security:zeek.list"\n  wget -nv https://download.opensuse.org/repositories/security:zeek/xUbuntu_18.04/Release.key -O /tmp/Release.key\n  apt-key add - </tmp/Release.key &>/dev/null\n  # Update APT repositories\n  apt-get -qq -ym update\n  # Install tools to build and configure Zeek\n  apt-get -qq -ym install zeek crudini\n  export PATH=$PATH:/opt/zeek/bin\n  pip install zkg==2.1.1\n  zkg refresh\n  zkg autoconfig\n  zkg install --force salesforce/ja3\n  # Load Zeek scripts\n  echo \'\n  @load protocols/ftp/software\n  @load protocols/smtp/software\n  @load protocols/ssh/software\n  @load protocols/http/software\n  @load tuning/json-logs\n  @load policy/integration/collective-intel\n  @load policy/frameworks/intel/do_notice\n  @load frameworks/intel/seen\n  @load frameworks/intel/do_notice\n  @load frameworks/files/hash-all-files\n  @load base/protocols/smb\n  @load policy/protocols/conn/vlan-logging\n  @load policy/protocols/conn/mac-logging\n  @load ja3\n\n  redef Intel::read_files += {\n    "/opt/zeek/etc/intel.dat"\n  };\n  \' >>/opt/zeek/share/zeek/site/local.zeek\n\n  # Configure Zeek\n  crudini --del $NODECFG zeek\n  crudini --set $NODECFG manager type manager\n  crudini --set $NODECFG manager host localhost\n  crudini --set $NODECFG proxy type proxy\n  crudini --set $NODECFG proxy host localhost\n\n  # Setup $CPUS numbers of Zeek workers\n  crudini --set $NODECFG worker-eth1 type worker\n  crudini --set $NODECFG worker-eth1 host localhost\n  crudini --set $NODECFG worker-eth1 interface eth1\n  crudini --set $NODECFG worker-eth1 lb_method pf_ring\n  crudini --set $NODECFG worker-eth1 lb_procs "$(nproc)"\n\n  # Setup Zeek to run at boot\n  cp /vagrant/resources/zeek/zeek.service /lib/systemd/system/zeek.service\n  systemctl enable zeek\n  systemctl start zeek\n\n  # Verify that Zeek is running\n  # if ! pgrep -f zeek >/dev/null; then\n  #   echo "Zeek attempted to start but is not running. Exiting"\n  #   exit 1\n  # fi\n}\n\ninstall_velociraptor() {\n  echo "[$(date +%H:%M:%S)]: Installing Velociraptor..."\n  if [ ! -d "/opt/velociraptor" ]; then\n    mkdir /opt/velociraptor\n  fi\n  echo "[$(date +%H:%M:%S)]: Attempting to determine the URL for the latest release of Velociraptor"\n  LATEST_VELOCIRAPTOR_LINUX_URL=$(curl -sL https://github.com/Velocidex/velociraptor/releases/latest | grep linux-amd64 | grep href | head -1 | cut -d \'"\' -f 2 | sed \'s#^#https://github.com#g\')\n  echo "[$(date +%H:%M:%S)]: The URL for the latest release was extracted as $LATEST_VELOCIRAPTOR_LINUX_URL"\n  echo "[$(date +%H:%M:%S)]: Attempting to download..."\n  wget -P /opt/velociraptor --progress=bar:force "$LATEST_VELOCIRAPTOR_LINUX_URL"\n  if [ "$(file /opt/velociraptor/velociraptor*linux-amd64 | grep -c \'ELF 64-bit LSB executable\')" -eq 1 ]; then\n    echo "[$(date +%H:%M:%S)]: Velociraptor successfully downloaded!"\n  else\n    echo "[$(date +%H:%M:%S)]: Failed to download the latest version of Velociraptor. Please open a DetectionLab issue on Github."\n    return\n  fi\n\n  cd /opt/velociraptor || exit 1\n  mv velociraptor-*-linux-amd64 velociraptor\n  chmod +x velociraptor\n  cp /vagrant/resources/velociraptor/server.config.yaml /opt/velociraptor\n  echo "[$(date +%H:%M:%S)]: Creating Velociraptor dpkg..."\n  ./velociraptor --config /opt/velociraptor/server.config.yaml debian server\n\n  echo "[$(date +%H:%M:%S)]: Installing the dpkg..."\n  if dpkg -i velociraptor_*_server.deb >/dev/null; then\n    echo "[$(date +%H:%M:%S)]: Installation complete!"\n  else\n    echo "[$(date +%H:%M:%S)]: Failed to install the dpkg"\n    return\n  fi\n\n  echo "[$(date +%H:%M:%S)]: Creating admin user..."\n  sudo -u velociraptor ./velociraptor --config /opt/velociraptor/server.config.yaml user add --role administrator vagrant vagrant\n  rm -rf /opt/velociraptor/users/admin.db /opt/velociraptor/acl/admin.json.db\n}\n\ninstall_suricata() {\n  # Run iwr -Uri testmyids.com -UserAgent "BlackSun" in Powershell to generate test alerts from Windows\n  echo "[$(date +%H:%M:%S)]: Installing Suricata..."\n\n  # Install suricata\n  apt-get -qq -y install suricata crudini\n  test_suricata_prerequisites\n  # Install suricata-update\n  cd /opt || exit 1\n  git clone https://github.com/OISF/suricata-update.git\n  cd /opt/suricata-update || exit 1\n  pip install pyyaml\n  python setup.py install\n\n  cp /vagrant/resources/suricata/suricata.yaml /etc/suricata/suricata.yaml\n  crudini --set --format=sh /etc/default/suricata \'\' iface eth1\n  # update suricata signature sources\n  suricata-update update-sources\n  # disable protocol decode as it is duplicative of Zeek\n  echo re:protocol-command-decode >>/etc/suricata/disable.conf\n  # enable et-open and attackdetection sources\n  suricata-update enable-source et/open\n  suricata-update enable-source ptresearch/attackdetection\n\n  # Update suricata and restart\n  suricata-update\n  service suricata stop\n  service suricata start\n  sleep 3\n\n  # Verify that Suricata is running\n  if ! pgrep -f suricata >/dev/null; then\n    echo "Suricata attempted to start but is not running. Exiting"\n    exit 1\n  fi\n\n  cat >/etc/logrotate.d/suricata <<EOF\n/var/log/suricata/*.log /var/log/suricata/*.json\n{\n    hourly\n    rotate 0\n    missingok\n    nocompress\n    size=500M\n    sharedscripts\n    postrotate\n            /bin/kill -HUP \\`cat /var/run/suricata.pid 2>/dev/null\\` 2>/dev/null || true\n    endscript\n}\nEOF\n}\n\ntest_suricata_prerequisites() {\n  for package in suricata crudini; do\n    echo "[$(date +%H:%M:%S)]: [TEST] Validating that $package is correctly installed..."\n    # Loop through each package using dpkg\n    if ! dpkg -S $package >/dev/null; then\n      # If which returns a non-zero return code, try to re-install the package\n      echo "[-] $package was not found. Attempting to reinstall."\n      apt-get clean && apt-get -qq update && apt-get install -y $package\n      if ! which $package >/dev/null; then\n        # If the reinstall fails, give up\n        echo "[X] Unable to install $package even after a retry. Exiting."\n        exit 1\n      fi\n    else\n      echo "[+] $package was successfully installed!"\n    fi\n  done\n}\n\ninstall_guacamole() {\n  echo "[$(date +%H:%M:%S)]: Installing Guacamole..."\n  cd /opt || exit 1\n  apt-get -qq install -y libcairo2-dev libjpeg62-dev libpng-dev libossp-uuid-dev libfreerdp-dev libpango1.0-dev libssh2-1-dev libssh-dev tomcat8 tomcat8-admin tomcat8-user\n  wget --progress=bar:force "http://apache.org/dyn/closer.cgi?action=download&filename=guacamole/1.0.0/source/guacamole-server-1.0.0.tar.gz" -O guacamole-server-1.0.0.tar.gz\n  tar -xf guacamole-server-1.0.0.tar.gz && cd guacamole-server-1.0.0 || echo "[-] Unable to find the Guacamole folder."\n  ./configure &>/dev/null && make --quiet &>/dev/null && make --quiet install &>/dev/null || echo "[-] An error occurred while installing Guacamole."\n  ldconfig\n  cd /var/lib/tomcat8/webapps || echo "[-] Unable to find the tomcat8/webapps folder."\n  wget --progress=bar:force "http://apache.org/dyn/closer.cgi?action=download&filename=guacamole/1.0.0/binary/guacamole-1.0.0.war" -O guacamole.war\n  mkdir /etc/guacamole\n  mkdir /usr/share/tomcat8/.guacamole\n  cp /vagrant/resources/guacamole/user-mapping.xml /etc/guacamole/\n  cp /vagrant/resources/guacamole/guacamole.properties /etc/guacamole/\n  cp /vagrant/resources/guacamole/guacd.service /lib/systemd/system\n  sudo ln -s /etc/guacamole/guacamole.properties /usr/share/tomcat8/.guacamole/\n  sudo ln -s /etc/guacamole/user-mapping.xml /usr/share/tomcat8/.guacamole/\n  chown tomcat8 /etc/guacamole/user-mapping.xml\n\n  systemctl enable guacd\n  systemctl enable tomcat8\n  systemctl start guacd\n  systemctl start tomcat8\n}\n\npostinstall_tasks() {\n  # Include Splunk and Zeek in the PATH\n  echo export PATH="$PATH:/opt/zeek/bin" >>~/.bashrc\n  # Ping DetectionLab server for usage statistics\n  # curl -A "DetectionLab-logger" "https://cyberdefenders.org/logger"\n}\n\nmain() {\n  apt_install_prerequisites\n  modify_motd\n  test_prerequisites\n  #fix_eth1_static_ip\n  download_palantir_osquery_config\n  install_fleet_import_osquery_config\n  install_velociraptor\n  install_suricata\n  install_zeek\n  install_guacamole\n  postinstall_tasks\n}\n\nmain\nexit 0\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var o=n(67294);const a={},r=o.createContext(a);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);