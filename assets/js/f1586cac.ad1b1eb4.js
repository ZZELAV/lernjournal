"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6319],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},95434:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const i={title:"Tag 9",tags:["M122","Tag 9","Powershell","Kontrollstrukturen"]},l="Tag 9: Kontrollstrukturen",o={unversionedId:"M122/tag-0009",id:"M122/tag-0009",title:"Tag 9",description:"1 Kontrollstrukturen",source:"@site/docs/M122/tag-0009.md",sourceDirName:"M122",slug:"/M122/tag-0009",permalink:"/docs/M122/tag-0009",draft:!1,tags:[{label:"M122",permalink:"/docs/tags/m-122"},{label:"Tag 9",permalink:"/docs/tags/tag-9"},{label:"Powershell",permalink:"/docs/tags/powershell"},{label:"Kontrollstrukturen",permalink:"/docs/tags/kontrollstrukturen"}],version:"current",frontMatter:{title:"Tag 9",tags:["M122","Tag 9","Powershell","Kontrollstrukturen"]},sidebar:"tutorialSidebar",previous:{title:"Tag 8",permalink:"/docs/M122/tag-0008"},next:{title:"Tag 10",permalink:"/docs/M122/tag-0010"}},s={},u=[{value:"1 Kontrollstrukturen",id:"1-kontrollstrukturen",level:2},{value:"1.1 For Each Schleife",id:"11-for-each-schleife",level:3},{value:"1.2 If Else Bedingung",id:"12-if-else-bedingung",level:3},{value:"1.3 Switch Bedingung",id:"13-switch-bedingung",level:3},{value:"2 Aufgabe Parameter und Verz\xf6gerung",id:"2-aufgabe-parameter-und-verz\xf6gerung",level:2},{value:"2.1 Einf\xfchraufgabe",id:"21-einf\xfchraufgabe",level:3},{value:"2.2 Aufgabe 1",id:"22-aufgabe-1",level:3},{value:"2.3 Aufgabe 2",id:"23-aufgabe-2",level:3},{value:"2.4 Aufgabe 3",id:"24-aufgabe-3",level:3}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tag-9-kontrollstrukturen"},"Tag 9: Kontrollstrukturen"),(0,a.kt)("h2",{id:"1-kontrollstrukturen"},"1 Kontrollstrukturen"),(0,a.kt)("h3",{id:"11-for-each-schleife"},"1.1 For Each Schleife"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'$processlist = Get-Service\nforeach ($process in $processlist) {\n    Write-Host $process.name " "\n    $process.status\n}\n')),(0,a.kt)("h3",{id:"12-if-else-bedingung"},"1.2 If Else Bedingung"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'[int]$a = Read-Host "Geben Sie eine Zahl ein:"\nif ($a -ge 0) {\n    Write-Host "$a ist positiv"\n}\nelse {\n    Write-Host "$a ist negativ" -Foregroundcolor Red\n}\n')),(0,a.kt)("h3",{id:"13-switch-bedingung"},"1.3 Switch Bedingung"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'[int]$a = Read-Host "Geben Sie eine Zahl\nzwischen von 1 bis 10 ein:"\nswitch ($a) {\n    1 { Write-Host "Eins" }\n    2 { Write-Host "Zwei" }\n    3 { Write-Host "Drei" }\n    4 { Write-Host "Vier" }\n    5 { Write-Host "F\xfcnf" }\n    6 { Write-Host "Sechs" }\n    7 { Write-Host "Sieben" }\n    8 { Write-Host "Acht" }\n    9 { Write-Host "Neun" }\n    10 { Write-Host "Zehn" }\n    default {\n        Write-Host "Ung\xfcltige Zahl"\n    }\n}\n')),(0,a.kt)("h2",{id:"2-aufgabe-parameter-und-verz\xf6gerung"},"2 Aufgabe Parameter und Verz\xf6gerung"),(0,a.kt)("h3",{id:"21-einf\xfchraufgabe"},"2.1 Einf\xfchraufgabe"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"param (\n    # Parameter help description\n    [Parameter(Mandatory = $true)]\n    [int]\n    $num,\n    # Parameter help description\n    [Parameter(Mandatory = $true)]\n    [int]\n    $delay\n)\n\nfor ($i = 0; $i -le $num; $i++) {\n    Start-Sleep -Milliseconds $delay\n    Write-Host $i\n}\n")),(0,a.kt)("h3",{id:"22-aufgabe-1"},"2.2 Aufgabe 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"# Author: Valentino Panico\n# Datum: 25.04.2022\n# Version: 1.0\n# Funktionsbeschreibung: Ordner mit Namen von Lernenden erstellen\n# Parameter: [1] CSV File mit Namen der Lernenden | [2] Pfad f\xfcr Ordererstellung\n# ---\n\n# parameter definieren\nparam (\n    # csv file mit namen der lernenden\n    [Parameter(Mandatory=$true)]\n    [string]\n    $lernende,\n    # pfad f\xfcr ordner erstellung\n    [Parameter(Mandatory=$true)]\n    [string]\n    $ordner\n)\n\n# ordner l\xf6schen falls existiert\nif (Test-Path $ordner -PathType leaf)\n{\n    Remove-Item $ordner\n}\n\n# csv import\n$csvImport = Import-Csv $lernende -Delimiter \";\"\n$csvImport | ForEach-Object {\n\n    # name einlesen und Sonderzeichen ersetzen\n    $name = ($_.Name -ireplace '\xe4', 'ae' -ireplace '\xf6', 'oe' -ireplace '\xfc', 'ue' -ireplace '\xe9', 'e')\n\n    # Vorname einlesen und Sonderzeichen ersetzen\n    $vorname = ($_.Vorname -ireplace '\xe4', 'ae' -ireplace '\xf6', 'oe' -ireplace '\xfc', 'ue' -ireplace '\xe9', 'e')\n\n    # vorname unterteilen und nur ersten nutzen\n    $splitUpVorname = $vorname -split \"\\s\"\n    $vorname = $splitUpVorname[0]\n\n    # vorname und nachname zusammensetzen\n    $fullName = $vorname + \".\" + $name\n\n    # ordner erstellen\n    New-Item -ItemType Directory -Path $ordner -name \"$fullName\"\n}\n")),(0,a.kt)("h3",{id:"23-aufgabe-2"},"2.3 Aufgabe 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'# Author: Valentino Panico\n# Datum: 25.04.2022\n# Version: 1.0\n# Funktionsbeschreibung: Abfrage von Schweizer Ortschaften\n# Parameter: [1] CSV mit Orten\n# ---\n\n# parameter definieren\nparam (\n    # pfad zum csv\n    [Parameter(Mandatory = $true)]\n    [string]\n    $ort\n)\n\nWrite-Host "Willkommen zur Schweizer Ortsabfrage."\n\n$hashtableOrtKanton = @{}\n\n# csv daten importieren und in hashtable einsetzen\n$csvImport = Import-Csv $ort -Delimiter ";"\n$csvImport | ForEach-Object {\n    # ort einlesen\n    $ort = $_.ORTNAME\n\n    # kanton und plz einlesen\n    $kanton = $_.KT + " " + $_.PLZ\n\n    # \xfcberpr\xfcfen ob key in hashtable existiert,\n    # wenn ja -> value hinzuf\xfcgen zu key,\n    # wenn nein, key erstellen und value zuordnen\n    if ($hashtableOrtKanton.ContainsKey($ort)) {\n        $hashtableOrtKanton[$ort] += ", " + $kanton\n    }\n    else {\n        $hashtableOrtKanton[$ort] = $kanton\n    }\n}\n\n# solange eingabe nicht exit\nwhile ($inputOrt -ne "exit") {\n    # eingabe einlesen und in variable speichern\n    $inputOrt = Read-Host "Geben Sie einen Ort ein"\n\n    # wenn eingabe exit ist, programm beenden\n    if ($inputOrt -eq "exit") {\n        exit\n    }\n\n    # \xfcberpr\xfcfen ob key in hashtable existiert,\n    # wenn ja -> value ausgeben,\n    # wenn nein -> fehlermeldung ausgeben\n    if ($hashtableOrtKanton.ContainsKey($inputOrt)) {\n        $hashtableOrtKanton.$inputOrt\n    }\n    else {\n        Write-Host "Ort existiert nicht!"\n    }\n}\n')),(0,a.kt)("h3",{id:"24-aufgabe-3"},"2.4 Aufgabe 3"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},'# Author: Valentino Panico\n# Datum: 25.04.2022\n# Version: 1.0\n# Funktionsbeschreibung: Alle Exe Dateien in einem Verzeichnis ausgeben, mit Version und Gr\xf6sse\n# Parameter: [1] Pfad der Exe Dateien\n# ---\n\n# parameter definieren\nparam (\n    # pfad der exe dateien\n    [Parameter(Mandatory = $true)]\n    [string]\n    $path\n)\n\nGet-ChildItem $path *.exe | Select-Object Name, @{N="Groesse in Bytes";E={$_.Length}}, @{N="Version";E={$_.VersionInfo.ProductVersion}}\n')))}p.isMDXComponent=!0}}]);