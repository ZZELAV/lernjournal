"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[61003],{13047:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var a=n(85893),t=n(11151);const s={title:"Tag 10",tags:["M122","Tag 10","Powershell","Parameter","Verz\xf6gerung"]},i="Tag 10: Parameter und Verz\xf6gerung",o={id:"M122/tag-0010",title:"Tag 10",description:"1 Aufgabe Parameter und Verz\xf6gerung",source:"@site/docs/M122/tag-0010.md",sourceDirName:"M122",slug:"/M122/tag-0010",permalink:"/docs/M122/tag-0010",draft:!1,unlisted:!1,tags:[{label:"M122",permalink:"/docs/tags/m-122"},{label:"Tag 10",permalink:"/docs/tags/tag-10"},{label:"Powershell",permalink:"/docs/tags/powershell"},{label:"Parameter",permalink:"/docs/tags/parameter"},{label:"Verz\xf6gerung",permalink:"/docs/tags/verzogerung"}],version:"current",frontMatter:{title:"Tag 10",tags:["M122","Tag 10","Powershell","Parameter","Verz\xf6gerung"]},sidebar:"tutorialSidebar",previous:{title:"Tag 9",permalink:"/docs/M122/tag-0009"},next:{title:"Tag 11",permalink:"/docs/M122/tag-0011"}},l={},u=[{value:"1 Aufgabe Parameter und Verz\xf6gerung",id:"1-aufgabe-parameter-und-verz\xf6gerung",level:2},{value:"1.1 Aufgabe 4",id:"11-aufgabe-4",level:3},{value:"1.2 Aufgabe 5",id:"12-aufgabe-5",level:3},{value:"1.3 Aufgabe 6",id:"13-aufgabe-6",level:3},{value:"2 Aufgabe Funktionen",id:"2-aufgabe-funktionen",level:2},{value:"2.1 Aufgabe 1",id:"21-aufgabe-1",level:3},{value:"2.2 Aufgabe 2",id:"22-aufgabe-2",level:3},{value:"2.3 Aufgabe 3",id:"23-aufgabe-3",level:3},{value:"2.4 Aufgabe 4",id:"24-aufgabe-4",level:3}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",pre:"pre",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h1,{id:"tag-10-parameter-und-verz\xf6gerung",children:"Tag 10: Parameter und Verz\xf6gerung"}),"\n",(0,a.jsx)(r.h2,{id:"1-aufgabe-parameter-und-verz\xf6gerung",children:"1 Aufgabe Parameter und Verz\xf6gerung"}),"\n",(0,a.jsx)(r.h3,{id:"11-aufgabe-4",children:"1.1 Aufgabe 4"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-powershell",children:'# Author: Valentino Panico\r\n# Datum: 04.05.2022\r\n# Version: 1.0\r\n# Funktionsbeschreibung: Sortieren von Prozessen nach CPU-Zeit und mit Farbe ausgeben\r\n# Parameter:\r\n# ---\r\n\r\n# variablen auf 0 setzen f\xfcr anzahl z\xe4hlen\r\n$greenProcess = 0\r\n$whiteProcess = 0\r\n$redProcess = 0\r\n\r\n# prozesse holen und sortieren\r\n# kleiner 300 = gruener text\r\n# zwischen 300 und 1000 = weisser text\r\n# groesser 1000 = roter text\r\nGet-Process | Sort-Object CPU | ForEach-Object { \r\n    if ($_.CPU -lt 300) { \r\n        Write-Host -ForegroundColor green $_.Name\r\n        $greenProcess += 1\r\n    } \r\n    elseif ($_.CPU -ge 300 -and $_.CPU -lt 1000) { \r\n        Write-Host -ForegroundColor white $_.Name\r\n        $whiteProcess += 1\r\n    }\r\n    else {\r\n        Write-Host -ForegroundColor red $_.Name\r\n        $redProcess += 1\r\n    }\r\n}\r\n\r\n# anzahl ausgeben\r\nWrite-Host "`n#####`n`nAnzahl gruene Prozesse:`t$greenProcess`nAnzahl weisse Prozesse:`t$whiteProcess`nAnzahl rote Prozesse:`t$redProcess"\n'})}),"\n",(0,a.jsx)(r.h3,{id:"12-aufgabe-5",children:"1.2 Aufgabe 5"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-powershell",children:'# Author: Valentino Panico\r\n# Datum: 04.05.2022\r\n# Version: 1.0\r\n# Funktionsbeschreibung: Sortieren von Prozessen nach CPU-Zeit und mit Farbe ausgeben\r\n# Parameter: [1] Pfad zum Verzeichnis, [2] Zu suchender Begriff, [3] Zu ersetzender Begriff\r\n# ---\r\n\r\n# parameter definieren\r\nparam (\r\n    # pfad zum verzeichnis\r\n    [Parameter(Mandatory = $true)]\r\n    [string]\r\n    $path,\r\n    # zu suchender begriff\r\n    [Parameter(Mandatory = $true)]\r\n    [string]\r\n    $search,\r\n    # zu ersetzender begriff\r\n    [Parameter(Mandatory = $true)]\r\n    [string]\r\n    $replace\r\n)\r\n\r\n# directory scannen und dateinamen speichern\r\n$collection = Get-ChildItem $path | ForEach-Object { $_.Name }\r\n\r\n# jede datei begriff ersetzen\r\nforeach ($item in $collection) {\r\n    $file = $path + "\\" + $item\r\n    (Get-Content $file) -replace "$search", "$replace" | Set-Content $file\r\n}\n'})}),"\n",(0,a.jsx)(r.h3,{id:"13-aufgabe-6",children:"1.3 Aufgabe 6"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-powershell",children:'# Author: Valentino Panico\r\n# Datum: 04.05.2022\r\n# Version: 1.0\r\n# Funktionsbeschreibung: CSV umschreiben f\xfcr Import in istest.ch\r\n# Parameter: [1] Pfad zur CSV-Datei, [2] Pfad zum Export-Ordner\r\n# ---\r\n\r\n# parameter definieren\r\nparam (\r\n    # pfad zur csv datei\r\n    [Parameter(Mandatory = $true)]\r\n    [string]\r\n    $pathCSV,\r\n    # pfad zum export ordner\r\n    [Parameter(Mandatory = $true)]\r\n    [string]\r\n    $pathExport\r\n)\r\n\r\n# csv importieren\r\n$csv = Import-Csv $pathCSV -Delimiter ";"\r\n\r\n$csv | ForEach-Object {\r\n    # klasse von jedem datensatz holen\r\n    $klasse = $_.Klasse\r\n\r\n    # klassenname splitten und nur erster teil nutzen\r\n    $splitKlasse = $klasse -split "\\s"\r\n    $klasse = $splitKlasse[0]\r\n\r\n    # export pfad setzen\r\n    $exportPath = $pathExport + $klasse + ".csv"\r\n\r\n    # csv exportieren\r\n    $csv | Where-Object { $_.Klasse -eq $klasse } | Select-Object Name, Vorname, Benutzername, @{N = "Kennwort"; E = { $_.Benutzername } } | Export-Csv $exportPath -Delimiter ";" -NoTypeInformation\r\n}\n'})}),"\n",(0,a.jsx)(r.h2,{id:"2-aufgabe-funktionen",children:"2 Aufgabe Funktionen"}),"\n",(0,a.jsx)(r.h3,{id:"21-aufgabe-1",children:"2.1 Aufgabe 1"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-powershell",children:"# Author: Valentino Panico\r\n# Datum: 02.05.2022\r\n# Version: 1.0\r\n# Funktionsbeschreibung: Celsius in Fahrenheit\r\n# Parameter: [1] Celsius Eingabe\r\n# ---\r\n\r\nfunction celsiusToFahrenheit {\r\n    param (\r\n        # celsius eingabe\r\n        [Parameter(Mandatory = $true)]\r\n        [double]\r\n        $celsius\r\n    )\r\n    \r\n    [double]$fahrenheit = ($celsius * 9) / 5 + 32\r\n\r\n    return $fahrenheit\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"22-aufgabe-2",children:"2.2 Aufgabe 2"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-powershell",children:'# Author: Valentino Panico\r\n# Datum: 02.05.2022\r\n# Version: 1.0\r\n# Funktionsbeschreibung: Datum in einem Hashtable ausgeben\r\n# Parameter:\r\n# ---\r\n\r\nfunction dateInHashtable {\r\n    # datum holen\r\n    $date = Get-Date\r\n\r\n    # hashtable erstellen\r\n    $dateHashtable = @{\r\n        "day" = $date.day\r\n        "month" = $date.month\r\n        "year" = $date.year\r\n    }\r\n    \r\n    return $dateHashtable\r\n}\n'})}),"\n",(0,a.jsx)(r.h3,{id:"23-aufgabe-3",children:"2.3 Aufgabe 3"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-powershell",children:"# Author: Valentino Panico\r\n# Datum: 04.05.2022\r\n# Version: 1.0\r\n# Funktionsbeschreibung: Prozesse ausgeben, die sichbar sind\r\n# Parameter: [1] Switch, Gridview\r\n# ---\r\n\r\nfunction visibleProcess {\r\n    param (\r\n        # true = gridview, false = terminal\r\n        [Parameter(Mandatory = $false)]\r\n        [switch]\r\n        $showGrid\r\n    )\r\n\r\n    # nur die prozesse ausgeben, die einen mainwindowtitle haben\r\n    # wenn showgrid gesetzt, als gridview ausgeben\r\n    # wenn nicht, in konsole\r\n    if ($showGrid -eq $true) {\r\n        Get-Process | Where-Object { $_.MainWindowTitle } | Select-Object Id, ProcessName | Out-GridView\r\n    }\r\n    else {\r\n        Get-Process | Where-Object { $_.MainWindowTitle } | Select-Object Id, ProcessName\r\n    }\r\n    \r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"24-aufgabe-4",children:"2.4 Aufgabe 4"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-powershell",children:'# Author: Valentino Panico\r\n# Datum: 04.05.2022\r\n# Version: 1.0\r\n# Funktionsbeschreibung: Prozesse ausgeben, die sichbar sind\r\n# Parameter: [1] Switch, Gridview\r\n# ---\r\n\r\nfunction getMonthDE {\r\n    param (\r\n        # mit hashtable\r\n        [Parameter(Mandatory = $false)]\r\n        [switch]\r\n        $asHashtable\r\n    )\r\n\r\n    [string]$dayofweek = (Get-Date).DayOfWeek\r\n\r\n    if ($asHashtable -eq $true) {\r\n        $dayofweekHashtable = @{\r\n            "Monday"    = "Montag"\r\n            "Tuesday"   = "Dienstag"\r\n            "Wednesday" = "Mittwoch"\r\n            "Thursday"  = "Donnerstag"\r\n            "Friday"    = "Freitag"\r\n            "Saturday"  = "Samstag"\r\n            "Sunday"    = "Sonntag"\r\n        }\r\n\r\n        if ($dayofweekHashtable.ContainsKey($dayofweek)) {\r\n            Write-Host "Aktueller Wochentag (Hashtable):" $dayofweekHashtable.$dayofweek\r\n        }\r\n    }\r\n    else {\r\n        switch ($dayofweek) {\r\n            "Monday" { $dayofweekDE = "Montag" }\r\n            "Tuesday" { $dayofweekDE = "Dienstag" }\r\n            "Wednesday" { $dayofweekDE = "Mittwoch" }\r\n            "Thursday" { $dayofweekDE = "Donnerstag" }\r\n            "Friday" { $dayofweekDE = "Freitag" }\r\n            "Saturday" { $dayofweekDE = "Samstag" }\r\n            "Sunday" { $dayofweekDE = "Sonntag" }\r\n        }\r\n\r\n        Write-Host "Aktueller Wochentag (Switch-Case):" $dayofweekDE\r\n    }\r\n}\n'})})]})}function c(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>o,a:()=>i});var a=n(67294);const t={},s=a.createContext(t);function i(e){const r=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:r},e.children)}}}]);