"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[34184],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,g=p["".concat(s,".").concat(m)]||p[m]||c[m]||i;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},38525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=t(87462),r=(t(67294),t(3905));const i={title:"Tag 13",tags:["M141","Tag 13","MongoDB","Design","Schema","Indexierung","Cluster"]},o="Tag 13",l={unversionedId:"M141/tag-0013",id:"M141/tag-0013",title:"Tag 13",description:"1 Dokumentationsauftr\xe4ge",source:"@site/docs/M141/tag-0013.md",sourceDirName:"M141",slug:"/M141/tag-0013",permalink:"/docs/M141/tag-0013",draft:!1,tags:[{label:"M141",permalink:"/docs/tags/m-141"},{label:"Tag 13",permalink:"/docs/tags/tag-13"},{label:"MongoDB",permalink:"/docs/tags/mongo-db"},{label:"Design",permalink:"/docs/tags/design"},{label:"Schema",permalink:"/docs/tags/schema"},{label:"Indexierung",permalink:"/docs/tags/indexierung"},{label:"Cluster",permalink:"/docs/tags/cluster"}],version:"current",frontMatter:{title:"Tag 13",tags:["M141","Tag 13","MongoDB","Design","Schema","Indexierung","Cluster"]},sidebar:"tutorialSidebar",previous:{title:"Tag 12",permalink:"/docs/M141/tag-0012"},next:{title:"M143",permalink:"/docs/M143/"}},s={},u=[{value:"1 Dokumentationsauftr\xe4ge",id:"1-dokumentationsauftr\xe4ge",level:2},{value:"1.1 Best Practices beim Datenbankdesign",id:"11-best-practices-beim-datenbankdesign",level:3},{value:"1.1.1 Relational vs. Schemaless",id:"111-relational-vs-schemaless",level:4},{value:"1.1.2 Embedding vs. Referencing",id:"112-embedding-vs-referencing",level:4},{value:"Beispiel",id:"beispiel",level:5},{value:"Vor- und Nachteile Referencing",id:"vor--und-nachteile-referencing",level:5},{value:"Vor- und Nachteile Embedding",id:"vor--und-nachteile-embedding",level:5},{value:"1.2 \xdcbung Indexierung",id:"12-\xfcbung-indexierung",level:3},{value:"1.2.1 Vorbereitung",id:"121-vorbereitung",level:4},{value:"1.2.2 Daten generieren",id:"122-daten-generieren",level:4},{value:"1.2.3 Indices auslesen",id:"123-indices-auslesen",level:4},{value:"1.2.4 Testen",id:"124-testen",level:4},{value:"1.2.5 Index erfassen",id:"125-index-erfassen",level:4},{value:"1.3 \xdcbung Replication",id:"13-\xfcbung-replication",level:3},{value:"1.3.1 Vorbereitung",id:"131-vorbereitung",level:4},{value:"1.3.2 Instanzen starten",id:"132-instanzen-starten",level:4},{value:"1.3.3 Starten",id:"133-starten",level:4},{value:"1.3.4 Insert testen",id:"134-insert-testen",level:4},{value:"1.3.5 Replikation testen",id:"135-replikation-testen",level:4},{value:"1.4 \xdcbung Sharding",id:"14-\xfcbung-sharding",level:3},{value:"1.4.1 Vorbereitung I, Config Server",id:"141-vorbereitung-i-config-server",level:4},{value:"1.4.2 Vorbereitung 2, Shards einrichten",id:"142-vorbereitung-2-shards-einrichten",level:4},{value:"1.4.3 Shards initialisieren",id:"143-shards-initialisieren",level:4},{value:"1.4.4 mongos (Query Router)",id:"144-mongos-query-router",level:4},{value:"1.4.5 Shards hinzuf\xfcgen",id:"145-shards-hinzuf\xfcgen",level:4},{value:"1.4.6 Sharding einf\xfchren und testen",id:"146-sharding-einf\xfchren-und-testen",level:4},{value:"1.4.7 Kontrolle",id:"147-kontrolle",level:4},{value:"1.4.8 Anwendung",id:"148-anwendung",level:4}],d={toc:u},p="wrapper";function c(e){let{components:n,...i}=e;return(0,r.kt)(p,(0,a.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tag-13"},"Tag 13"),(0,r.kt)("h2",{id:"1-dokumentationsauftr\xe4ge"},"1 Dokumentationsauftr\xe4ge"),(0,r.kt)("h3",{id:"11-best-practices-beim-datenbankdesign"},"1.1 Best Practices beim Datenbankdesign"),(0,r.kt)("h4",{id:"111-relational-vs-schemaless"},"1.1.1 Relational vs. Schemaless"),(0,r.kt)("p",null,"Bei relationalen Datenbanken werden Informationen mittels SQL Joins geholt. Da MongoDB allerdings mit Documents und nicht mit Tabellen arbeitet, muss dieses Schema mittels Arrays und Nested Documents abgebildet werden."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "first_name": "Paul",\n  "surname": "Miller",\n  "cell": "447557505611",\n  "city": "London",\n  "location": [45.123, 47.232],\n  "profession": ["banking", "finance", "trader"],\n  "cars": [\n    {\n      "model": "Bentley",\n      "year": 1973\n    },\n    {\n      "model": "Rolls Royce",\n      "year": 1965\n    }\n  ]\n}\n')),(0,r.kt)("admonition",{title:"MERKE",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Anstatt Daten in verschiedene Tabellen aufzusplitten, nutzen wir Arrays und Nested Documents um Informationen strukturiert abbilden zu k\xf6nnen."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Wichtig: in diesem Fall keine separaten Collections erstellen"))),(0,r.kt)("h4",{id:"112-embedding-vs-referencing"},"1.1.2 Embedding vs. Referencing"),(0,r.kt)("p",null,"Um bei MongoDB FKs und PKs zu erzwingen, muss das ",(0,r.kt)("inlineCode",{parentName:"p"},"Referencing")," mittels des Operators ",(0,r.kt)("inlineCode",{parentName:"p"},"$lookup")," genutzt werden. ",(0,r.kt)("inlineCode",{parentName:"p"},"$lookup")," kann mit einem ",(0,r.kt)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN")," verglichen werden."),(0,r.kt)("h5",{id:"beispiel"},"Beispiel"),(0,r.kt)("p",null,"Collection ",(0,r.kt)("inlineCode",{parentName:"p"},"order")," erstellen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'db.orders.insertMany( [\n   { "_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2 },\n   { "_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1 },\n   { "_id" : 3  }\n] )\n')),(0,r.kt)("p",null,"Collection ",(0,r.kt)("inlineCode",{parentName:"p"},"inventory")," erstellen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'db.inventory.insertMany( [\n   { "_id" : 1, "sku" : "almonds", "description": "product 1", "instock" : 120 },\n   { "_id" : 2, "sku" : "bread", "description": "product 2", "instock" : 80 },\n   { "_id" : 3, "sku" : "cashews", "description": "product 3", "instock" : 60 },\n   { "_id" : 4, "sku" : "pecans", "description": "product 4", "instock" : 70 },\n   { "_id" : 5, "sku": null, "description": "Incomplete" },\n   { "_id" : 6 }\n] )\n')),(0,r.kt)("p",null,"Die Collections verkn\xfcpfen (referenzieren):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'db.orders.aggregate( [\n   {\n     $lookup:\n       {\n         from: "inventory",\n         localField: "item",\n         foreignField: "sku",\n         as: "inventory_docs"\n       }\n  }\n] )\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb",metastring:'title="OUTPUT"',title:'"OUTPUT"'},'{\n   "_id" : 1,\n   "item" : "almonds",\n   "price" : 12,\n   "quantity" : 2,\n   "inventory_docs" : [\n      { "_id" : 1, "sku" : "almonds", "description" : "product 1", "instock" : 120 }\n   ]\n}\n{\n   "_id" : 2,\n   "item" : "pecans",\n   "price" : 20,\n   "quantity" : 1,\n   "inventory_docs" : [\n      { "_id" : 4, "sku" : "pecans", "description" : "product 4", "instock" : 70 }\n   ]\n}\n{\n   "_id" : 3,\n   "inventory_docs" : [\n      { "_id" : 5, "sku" : null, "description" : "Incomplete" },\n      { "_id" : 6 }\n   ]\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/"},"Weitere Informationen")),(0,r.kt)("h5",{id:"vor--und-nachteile-referencing"},"Vor- und Nachteile Referencing"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Vorteile"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Kleinere Documents"),(0,r.kt)("li",{parentName:"ul"},"Documents k\xf6nnen kleiner als 16MB gehalten werden (Limit von BSON)"),(0,r.kt)("li",{parentName:"ul"},"N\xfctzlich wenn nicht alle Daten oft aufgerufen werden m\xfcssen"),(0,r.kt)("li",{parentName:"ul"},"Weniger Redundanzen in den Informationen")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nachteile"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Komplizierte Abfragen")),(0,r.kt)("h5",{id:"vor--und-nachteile-embedding"},"Vor- und Nachteile Embedding"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Vorteile"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Eine Query = alle Daten laden"),(0,r.kt)("li",{parentName:"ul"},"Keine Joins"),(0,r.kt)("li",{parentName:"ul"},"CRUD-Operationen sind ACID-f\xe4hig")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nachteile"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Query auf grosse Documents kann (bei doppelten Daten) die Performance beeinflussen")),(0,r.kt)("h3",{id:"12-\xfcbung-indexierung"},"1.2 \xdcbung Indexierung"),(0,r.kt)("h4",{id:"121-vorbereitung"},"1.2.1 Vorbereitung"),(0,r.kt)("p",null,"Neue Datenbank ",(0,r.kt)("inlineCode",{parentName:"p"},"phones")," erstellen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"use phones\n")),(0,r.kt)("p",null,"Funktion importieren um Testdaten zu generieren:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'    populatePhones = function(area, start, stop) {\n      for(var i = start; i < stop; i++) {\n        var country = 1 + ((Math.random() * 8) << 0);\n        var num = (country * 1e10) + (area * 1e7) + i;\n        var fullNumber = "+" + country + " " + area + "-" + i;\n        db.phones.insert({\n          _id: num,\n          components: {\n            country: country,\n            area: area,\n            prefix: (i * 1e-4) << 0,\n            number: i\n          },\n          display: fullNumber\n        });\n        print("Inserted number " + fullNumber);\n      }\n      print("Done!");\n    }\n')),(0,r.kt)("h4",{id:"122-daten-generieren"},"1.2.2 Daten generieren"),(0,r.kt)("p",null,"Daten generieren:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"populatePhones(800, 5550000, 5650000)\n")),(0,r.kt)("p",null,"Daten kontrollieren:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"db.phones.find().limit(2)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb",metastring:'title="OUTPUT"',title:'"OUTPUT"'},"[\n  {\n    _id: 88005550000,\n    components: { country: 8, area: 800, prefix: 555, number: 5550000 },\n    display: '+8 800-5550000'\n  },\n  {\n    _id: 28005550001,\n    components: { country: 2, area: 800, prefix: 555, number: 5550001 },\n    display: '+2 800-5550001'\n  }\n]\n")),(0,r.kt)("h4",{id:"123-indices-auslesen"},"1.2.3 Indices auslesen"),(0,r.kt)("p",null,"Indices der bestehenden Collections anzeigen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'db.getCollectionNames().forEach(function(collection) {\n     print("Indexes for the " + collection + " collection:");\n     printjson(db[collection].getIndexes());\n});\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb",metastring:'title="OUTPUT"',title:'"OUTPUT"'},"Indexes for the phones collection:\n[\n  {\n    v: 2,\n    key: {\n      _id: 1\n    },\n    name: '_id_'\n  }\n]\n")),(0,r.kt)("h4",{id:"124-testen"},"1.2.4 Testen"),(0,r.kt)("p",null,"Perfomance ohne Indices testen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'db.phones.explain("executionStats").find({display: "+1 800-5650001"})\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb",metastring:'title="OUTPUT"',title:'"OUTPUT"'},"...\nexecutionTimeMillis: 61, // Ausf\xfchrzeit in Millisekunden\n...\ntotalDocsExamined: 100000, // Anzahl Documents\n...\nstage: 'COLLSCAN', // Typ des Scans\n...\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"MongoDB Stages",src:t(23288).Z,width:"621",height:"279"}),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/manual/reference/explain-results/"},"https://www.mongodb.com/docs/manual/reference/explain-results/")),(0,r.kt)("h4",{id:"125-index-erfassen"},"1.2.5 Index erfassen"),(0,r.kt)("p",null,"Index erstellen"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"db.phones.createIndex(\n  { display : 1 },\n  { unique : true, dropDups : true }\n)\n")),(0,r.kt)("p",null,"Die Indexe sollen ",(0,r.kt)("inlineCode",{parentName:"p"},"unique")," sein und ",(0,r.kt)("inlineCode",{parentName:"p"},"dropDups")," entfernt Duplikate."),(0,r.kt)("p",null,"Perfomance nochmals mit Indices testen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb",metastring:'title="OUTPUT"',title:'"OUTPUT"'},"...\nexecutionTimeMillis: 1,\n...\ntotalDocsExamined: 0,\n...\nstage: 'FETCH',\n...\n")),(0,r.kt)("h3",{id:"13-\xfcbung-replication"},"1.3 \xdcbung Replication"),(0,r.kt)("h4",{id:"131-vorbereitung"},"1.3.1 Vorbereitung"),(0,r.kt)("p",null,"Data-Directories f\xfcr 3 MongoDB-Instanzen erstellen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mkdir ./mongo1 ./mongo2 ./mongo3\n")),(0,r.kt)("h4",{id:"132-instanzen-starten"},"1.3.2 Instanzen starten"),(0,r.kt)("p",null,"Pro Instanz ein Terminal (muss offen bleiben):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mongod --replSet book --dbpath ./mongo1 --port 27011\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mongod --replSet book --dbpath ./mongo2 --port 27012\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mongod --replSet book --dbpath ./mongo3 --port 27013\n")),(0,r.kt)("h4",{id:"133-starten"},"1.3.3 Starten"),(0,r.kt)("p",null,"Auf eine Instanz per Shell einloggen und Initialisierung f\xfcr Replikation starten:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"rs.initiate({\n    _id: 'book',\n    members: [\n      {_id: 1, host: 'localhost:27011'},\n      {_id: 2, host: 'localhost:27012'},\n      {_id: 3, host: 'localhost:27013'}\n    ]\n})\n")),(0,r.kt)("p",null,"Status kontrollieren:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"rs.status().ok\n")),(0,r.kt)("h4",{id:"134-insert-testen"},"1.3.4 Insert testen"),(0,r.kt)("admonition",{title:"ACHTUNG",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Verbindung auf gesamten Cluster muss genutzt werden."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"mongo mongodb://localhost:27011,localhost:27012,localhost:27013/replicaSet=book\n"))),(0,r.kt)("p",null,"Ersten Test-Insert durchf\xfchren:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"db.echo.insert({ say : 'HELLO!' })\n")),(0,r.kt)("p",null,"Auf den Terminals der Instanzen sollte viel Output angezeigt werden."),(0,r.kt)("p",null,"Resultat des Tests \xfcberpr\xfcfen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"db.echo.find()\n")),(0,r.kt)("h4",{id:"135-replikation-testen"},"1.3.5 Replikation testen"),(0,r.kt)("p",null,"Eine Instanz killen. Die anderen Instanzen sollten weiter funktionieren."),(0,r.kt)("h3",{id:"14-\xfcbung-sharding"},"1.4 \xdcbung Sharding"),(0,r.kt)("p",null,"Folgende Grafik ist das Ziel:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Ziel Sharding MongoDB",src:t(69752).Z,width:"1280",height:"452"})),(0,r.kt)("h4",{id:"141-vorbereitung-i-config-server"},"1.4.1 Vorbereitung I, Config Server"),(0,r.kt)("p",null,"Config-Ordner erstellen und Instanz starten:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'mkdir ./mongoconfig\nmongod --configsvr --replSet "config" --dbpath ./mongoconfig --port 27016\n')),(0,r.kt)("p",null,"Auf Server einloggen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"mongosh localhost:27016\n")),(0,r.kt)("p",null,"Cluster initialisieren:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"rs.initiate()\n")),(0,r.kt)("h4",{id:"142-vorbereitung-2-shards-einrichten"},"1.4.2 Vorbereitung 2, Shards einrichten"),(0,r.kt)("p",null,"Data-Verzeichnisse einrichten:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mkdir ./mongo4 ./mongo5\n")),(0,r.kt)("p",null,"Zwei Instanzen als Shard-Server starten:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'mongod --shardsvr --replSet "shard1" --dbpath ./mongo4 --port 27020\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'mongod --shardsvr --replSet "shard2" --dbpath ./mongo5 --port 27021\n')),(0,r.kt)("h4",{id:"143-shards-initialisieren"},"1.4.3 Shards initialisieren"),(0,r.kt)("p",null,"Auf beide Shards verbinden und initialisieren:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Shard 1")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"mongosh localhost:27020\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"rs.initiate()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Shard 1")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"mongosh localhost:27021\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"rs.initiate()\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Aktuelle Konfiguration \xfcberpr\xfcfen:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"rs.status()\n"))),(0,r.kt)("h4",{id:"144-mongos-query-router"},"1.4.4 mongos (Query Router)"),(0,r.kt)("p",null,"Mongos-Instanz starten (Verbindung mit Config-Server wird aufgebaut):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"mongos --configdb config/localhost:27016 --port 27025\n")),(0,r.kt)("h4",{id:"145-shards-hinzuf\xfcgen"},"1.4.5 Shards hinzuf\xfcgen"),(0,r.kt)("p",null,"Auf mongos-Instanz verbinden:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"mongosh localhost:27025\n")),(0,r.kt)("p",null,"Shards hinzuf\xfcgen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'sh.addShard("shard1/localhost:27020")\nsh.addShard("shard2/localhost:27021")\n')),(0,r.kt)("p",null,"Status der Shards kontrollieren:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"sh.status()\n")),(0,r.kt)("h4",{id:"146-sharding-einf\xfchren-und-testen"},"1.4.6 Sharding einf\xfchren und testen"),(0,r.kt)("p",null,"Sharding ist zwar aktiviert, aber noch nicht konfiguriert."),(0,r.kt)("p",null,"Auf der Datenbank ",(0,r.kt)("inlineCode",{parentName:"p"},"populations")," Sharding aktivieren (auf mongos-Instanz):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'sh.enableSharding("population")\n')),(0,r.kt)("p",null,"Collection ",(0,r.kt)("inlineCode",{parentName:"p"},"cities")," auf die Shards aufteilen. Dies mit einem Hashing auf dem Attribut ",(0,r.kt)("inlineCode",{parentName:"p"},"country")," als Shardkey:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'sh.shardCollection("populations.cities", { "country": "hashed" })\n')),(0,r.kt)("p",null,"Neue Datens\xe4tze einf\xfcgen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},'use populations\n\ndb.cities.insertMany([\n  {"name": "Seoul", "country": "South Korea", "continent": "Asia", "population": 25.674 },\n  {"name": "Mumbai", "country": "India", "continent": "Asia", "population": 19.980 },\n  {"name": "Lagos", "country": "Nigeria", "continent": "Africa", "population": 13.463 },\n  {"name": "Beijing", "country": "China", "continent": "Asia", "population": 19.618 },\n  {"name": "Shanghai", "country": "China", "continent": "Asia", "population": 25.582 },\n  {"name": "Osaka", "country": "Japan", "continent": "Asia", "population": 19.281 },\n  {"name": "Cairo", "country": "Egypt", "continent": "Africa", "population": 20.076 },\n  {"name": "Tokyo", "country": "Japan", "continent": "Asia", "population": 37.400 },\n  {"name": "Karachi", "country": "Pakistan", "continent": "Asia", "population": 15.400 },\n  {"name": "Dhaka", "country": "Bangladesh", "continent": "Asia", "population": 19.578 },\n  {"name": "Rio de Janeiro", "country": "Brazil", "continent": "South America", "population": 13.293 },\n  {"name": "S\xe3o Paulo", "country": "Brazil", "continent": "South America", "population": 21.650 },\n  {"name": "Mexico City", "country": "Mexico", "continent": "North America", "population": 21.581 },\n  {"name": "Delhi", "country": "India", "continent": "Asia", "population": 28.514 },\n  {"name": "Buenos Aires", "country": "Argentina", "continent": "South America", "population": 14.967 },\n  {"name": "Kolkata", "country": "India", "continent": "Asia", "population": 14.681 },\n  {"name": "New York", "country": "United States", "continent": "North America", "population": 18.819 },\n  {"name": "Manila", "country": "Philippines", "continent": "Asia", "population": 13.482 },\n  {"name": "Chongqing", "country": "China", "continent": "Asia", "population": 14.838 },\n  {"name": "Istanbul", "country": "Turkey", "continent": "Europe", "population": 14.751 }\n])\n')),(0,r.kt)("h4",{id:"147-kontrolle"},"1.4.7 Kontrolle"),(0,r.kt)("p",null,"Statistiken f\xfcr Shards anzeigen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"db.cities.getShardDistribution()\n")),(0,r.kt)("h4",{id:"148-anwendung"},"1.4.8 Anwendung"),(0,r.kt)("p",null,"Wenn jetzt ein ",(0,r.kt)("inlineCode",{parentName:"p"},"find()")," mit dem ",(0,r.kt)("inlineCode",{parentName:"p"},"explain()")," untersucht wird, kann man das Sharding sehen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-mongodb"},"db.cities.find().explain()\n")))}c.isMDXComponent=!0},23288:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/mongodb_stage-779420e4e8b6156a56c568df728afcd6.png"},69752:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/sharding_mongodb_ziel-c7ac4673a2e285c045270fc10893b7cd.png"}}]);