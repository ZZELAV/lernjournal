"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[82390],{44867:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var i=r(85893),t=r(11151);const a={title:"Tag 1",tags:["M226B","Tag 1","Java","Polymorphie","Vererbung","BZTF-Beispiel"]},s="Tag 1: Polymorphie und Vererbung",c={id:"M226B/tag-0001",title:"Tag 1",description:"1 Polymorphie",source:"@site/docs/M226B/tag-0001.md",sourceDirName:"M226B",slug:"/M226B/tag-0001",permalink:"/docs/M226B/tag-0001",draft:!1,unlisted:!1,tags:[{label:"M226B",permalink:"/docs/tags/m-226-b"},{label:"Tag 1",permalink:"/docs/tags/tag-1"},{label:"Java",permalink:"/docs/tags/java"},{label:"Polymorphie",permalink:"/docs/tags/polymorphie"},{label:"Vererbung",permalink:"/docs/tags/vererbung"},{label:"BZTF-Beispiel",permalink:"/docs/tags/bztf-beispiel"}],version:"current",frontMatter:{title:"Tag 1",tags:["M226B","Tag 1","Java","Polymorphie","Vererbung","BZTF-Beispiel"]},sidebar:"tutorialSidebar",previous:{title:"M226B",permalink:"/docs/M226B/"},next:{title:"Tag 2",permalink:"/docs/M226B/tag-0002"}},l={},h=[{value:"1 Polymorphie",id:"1-polymorphie",level:2},{value:"2 Vererbung",id:"2-vererbung",level:2},{value:"3 Beispiele",id:"3-beispiele",level:2},{value:"3.1 BZT1",id:"31-bzt1",level:3},{value:"3.2 BZT2",id:"32-bzt2",level:3}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"tag-1-polymorphie-und-vererbung",children:"Tag 1: Polymorphie und Vererbung"}),"\n",(0,i.jsx)(n.h2,{id:"1-polymorphie",children:"1 Polymorphie"}),"\n",(0,i.jsx)(n.p,{children:"Polymorphie ist die Vielgestaltigkeit von Klassen. Damit k\xf6nnen mehrere Methoden mit dem gleichem Namen erstellt werden und unterschiedliche Ergebnisse geliefert werden."}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["Statische Polymorphie:",(0,i.jsx)(n.br,{}),"\n","Methoden \xfcberschreiben (verschiedene Parameter)"]}),(0,i.jsxs)(n.p,{children:["Dynamische Polymorphie:",(0,i.jsx)(n.br,{}),"\n","Methoden werden in Subklassen \xfcberschrieben (dadurch ergibt sich ein anderes Verhalten der Klasse)"]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Statische Polymorphie"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class Ueberladen {\r\n\r\n    public static void main(String[] args) {\r\n        Ueberladen u = new Ueberladen();\r\n        u.print("Hallo");\r\n        u.print("Moin", "Klaus");\r\n    }\r\n\r\n    private void print(String txt) {\r\n        System.out.println(txt);\r\n    }\r\n\r\n    private void print(String txt, String name) {\r\n        System.out.println(txt + " " + name);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Dynamische Polymorphie"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class Polymorphie {\r\n\r\n    public Polymorphie() {\r\n        Tier[] tiere = { new Vogel(), new Wurm() };\r\n        for (int i = 0; i < tiere.length; i++) {\r\n            tiere[i].bewegtSich();\r\n            tiere[i].zwitscher();   // Fehler\r\n            tiere[i].frisst();      // Fehler\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        new Polymorphie();\r\n    }\r\n}\r\n\r\nclass Tier {\r\n    void bewegtSich() {\r\n        System.out.println("Schwimmen, laufen, kriechen, h\xfcpfen oder fliegen?");\r\n    }\r\n}\r\n\r\nclass Vogel extends Tier {\r\n    @Override\r\n    void bewegtSich() {\r\n        System.out.println("Ich fliege");\r\n    }\r\n\r\n    void zwitscher() {\r\n        System.out.println("tirilli");\r\n    }\r\n\r\n    void frisst() {\r\n        System.out.println(getClass() + " frisst");\r\n    }\r\n}\r\n\r\nclass Wurm extends Tier {\r\n    @Override\r\n    void bewegtSich() {\r\n        System.out.println("Ich krieche");\r\n    }\r\n\r\n    void frisst() {\r\n        System.out.println(getClass() + " frisst");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"2-vererbung",children:"2 Vererbung"}),"\n",(0,i.jsx)(n.p,{children:"Mit der Vererbung k\xf6nnen Methoden von Klassen wiederverwendbar gestaltet werden. Dies kann sehr komplex werden, daher lohnt es sich ein UML-Diagramm dazu zu zeichnen."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Grundprinzip:",(0,i.jsx)(n.br,{}),"\n","Superklasse mit NUR den notwendigsten Attributen und Methoden",(0,i.jsx)(n.br,{}),"\n","Subklassen erweitern dann die Superklasse"]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Bild Vererbung",src:r(47885).Z+"",width:"804",height:"491"})}),"\n",(0,i.jsx)(n.h2,{id:"3-beispiele",children:"3 Beispiele"}),"\n",(0,i.jsx)(n.h3,{id:"31-bzt1",children:"3.1 BZT1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\n/**\r\n * Hello world!\r\n *\r\n */\r\npublic class App\r\n{\r\n\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args)\r\n    {\r\n    Lehrer mt = new Lehrer();\r\n    mt.setNachname("Inauen");\r\n    mt.setFachbereich("Informatik");\r\n\r\n    Lernende mus = new Lernende();\r\n    mus.setNachname("Muster");\r\n    mus.setNummer(1001);\r\n\r\n    System.out.println("Nachname des Lehrers: " + mt.getNachname());\r\n    System.out.println("Fachbereich des Lehrers: " + mt.getFachbereich());\r\n\r\n    System.out.println("Nachname des Lernenden: " + mus.getNachname());\r\n    System.out.println("Nummer des Lernenden: " + mus.getNummer());\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package ch.bztf;\r\n\r\npublic class Lehrer\r\n{\r\n    private String fachbereich = new String(); // ein String ist eine Klasse, \r\n                                            // das geht deshalb mit new!\r\n    private String nachname;\r\n\r\n    public void setNachname(String nachname)\r\n    {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public String getNachname()\r\n    {\r\n        return nachname;\r\n    }\r\n\r\n    public void setFachbereich(String fachbereich)\r\n    {\r\n        this.fachbereich = fachbereich;\r\n    }\r\n\r\n    public String  getFachbereich()\r\n    {\r\n        return fachbereich;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package ch.bztf;\r\n\r\npublic class Lernende\r\n{\r\n    private String nachname = new String(); // new ist optional\r\n    private int nummer;  // Sch\xfclernummer\r\n\r\n    public void setNachname(String nachname)\r\n    {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public String getNachname()\r\n    {\r\n        return nachname;\r\n    }\r\n\r\n    public void setNummer(int nummer)\r\n    {\r\n        this.nummer = nummer;\r\n    }\r\n\r\n    public int getNummer()\r\n    {\r\n        return nummer;\r\n    }  \r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Das ist ein schlechtes Beispiel, denn es gibt doppelten Code, z.B. die Methoden ",(0,i.jsx)(n.code,{children:"setNachname(String nachname)"})," und ",(0,i.jsx)(n.code,{children:"getNachname()"})," gibt es in zwei Klassen. Auch die Erweiterung der Methoden w\xfcrde sehr m\xfchsam sein, denn man m\xfcsste es immer an allen Orten \xe4ndern. Um den doppelten Code zu verhindern, kann man die ",(0,i.jsx)(n.strong,{children:"Vererbung"})," nutzen."]}),"\n",(0,i.jsx)(n.h3,{id:"32-bzt2",children:"3.2 BZT2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package ch.bztf;\r\n\r\n/**\r\n * Hello world!\r\n *\r\n */\r\npublic class App\r\n{\r\n\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args)\r\n    {\r\n    Lehrer mt = new Lehrer();\r\n    mt.setNachname("Inauen");\r\n    mt.setFachbereich("Informatik");\r\n\r\n    Lernende mus = new Lernende();\r\n    mus.setNachname("Muster");\r\n    mus.setNummer(1001);\r\n\r\n    System.out.println("Nachname des Lehrers: " + mt.getNachname());\r\n    System.out.println("Fachbereich des Lehrers: " + mt.getFachbereich());\r\n\r\n    System.out.println("Nachname des Lernenden: " + mus.getNachname());\r\n    System.out.println("Nummer des Lernenden: " + mus.getNummer());\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package ch.bztf;\r\n\r\npublic class Person {\r\n    \r\n    private String nachname;\r\n\r\n    public void setNachname(String nachname)\r\n    {\r\n        this.nachname = nachname;\r\n    }\r\n\r\n    public String getNachname()\r\n    {\r\n        return nachname;\r\n    }\r\n\r\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package ch.bztf;\r\n\r\npublic class Lehrer extends Person\r\n{\r\n    private String fachbereich = new String(); // ein String ist eine Klasse, \r\n                                            // das geht deshalb mit new!\r\n\r\n    public void setFachbereich(String fachbereich)\r\n    {\r\n        this.fachbereich = fachbereich;\r\n    }\r\n\r\n    public String  getFachbereich()\r\n    {\r\n        return fachbereich;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package ch.bztf;\r\n\r\npublic class Lernende extends Person\r\n{\r\n    private int nummer;  // Sch\xfclernummer\r\n\r\n    public void setNummer(int nummer)\r\n    {\r\n        this.nummer = nummer;\r\n    }\r\n\r\n    public int getNummer()\r\n    {\r\n        return nummer;\r\n    }  \r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In diesem Beispiel wurde der doppelte Code in eine Klasse zusammengefasst (auch Superklasse genannt). Somit k\xf6nnen mit dem Argument ",(0,i.jsx)(n.code,{children:"extends ..."})," die Methoden der Superklasse mitgenommen werden."]}),"\n",(0,i.jsxs)(n.p,{children:["UML:",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.img,{alt:"UML",src:r(30935).Z+"",width:"691",height:"291"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"/appendix/M226B/UML/tag1_01",children:"Source Code"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Quellen: ",(0,i.jsx)(n.a,{href:"https://www.python-lernen.de/bilder/oop-hierarchie-tier-hund-katze-02.jpg",children:"Bild Vererbung"})]})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},30935:(e,n,r)=>{r.d(n,{Z:()=>i});const i=r.p+"assets/images/tag1_01-915cca8b972c447e23dcf273b8b5e012.svg"},47885:(e,n,r)=>{r.d(n,{Z:()=>i});const i=r.p+"assets/images/vererbung-3a803bfa91f3dd094d7195d070427feb.jpg"},11151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>s});var i=r(67294);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);